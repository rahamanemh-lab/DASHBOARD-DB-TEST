"""
Fonctions d'analyse des statuts des dossiers immobiliers pour le dashboard.
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from datetime import datetime, timedelta

from utils.data_processing import safe_to_datetime, safe_to_numeric, adjust_dates_to_month_range, extract_conseiller
from utils.export import create_download_button, export_to_pdf, create_pdf_download_link


def analyser_statuts_dossiers_immo(df):
    """
    Analyse d√©taill√©e des dossiers immobiliers par √©tape.
    
    Cette fonction fournit une analyse approfondie des dossiers immobiliers
    en fonction de leur √©tape, avec des visualisations et des statistiques.
    
    Args:
        df (DataFrame): DataFrame contenant les donn√©es immobili√®res
    """
    st.header("üìä Analyse par √âtape des Dossiers Immobiliers")
    
    # V√©rification des donn√©es
    if df is None or df.empty:
        st.error("‚ùå Aucune donn√©e disponible pour l'analyse des √©tapes.")
        return
    
    # V√©rifier que la colonne √©tape existe (recherche flexible)
    etape_col = None
    possible_etape_cols = ['√©tape', '√âtape', '√âTAPE', 'etape', 'Etape', 'ETAPE', 'Statut', 'statut', 'STATUT']
    
    for col in possible_etape_cols:
        if col in df.columns:
            etape_col = col
            break
    
    if etape_col is None:
        st.error("‚ùå Aucune colonne d'√©tape trouv√©e dans les donn√©es.")
        st.write("Colonnes disponibles:", ", ".join(df.columns))
        return
    
    st.info(f"üìã Utilisation de la colonne '{etape_col}' pour l'analyse des √©tapes.")
    
    # Nettoyage des donn√©es
    # Remplacer les valeurs NaN dans la colonne √©tape
    df[etape_col] = df[etape_col].fillna('Non d√©fini')
    
    # 1. Vue d'ensemble des √©tapes
    st.subheader("Vue d'ensemble des √©tapes")
    
    # Compter le nombre de dossiers par √©tape
    df_statut = df.groupby(etape_col).size().reset_index(name='Nombre de dossiers')
    df_statut = df_statut.sort_values('Nombre de dossiers', ascending=False)
    
    # Calculer les pourcentages
    total_dossiers = df_statut['Nombre de dossiers'].sum()
    df_statut['Pourcentage'] = (df_statut['Nombre de dossiers'] / total_dossiers * 100).round(2)
    
    # Afficher le tableau des √©tapes
    st.write("#### R√©partition des dossiers par √©tape")
    st.dataframe(df_statut)
    
    # Cr√©er un graphique en barres
    fig_bar = px.bar(
        df_statut,
        x=etape_col,
        y='Nombre de dossiers',
        text='Nombre de dossiers',
        title="Nombre de dossiers par √©tape",
        color=etape_col,
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    fig_bar.update_layout(xaxis_title="√âtape", yaxis_title="Nombre de dossiers")
    st.plotly_chart(fig_bar, use_container_width=True)
    
    # Cr√©er un graphique en camembert
    fig_pie = px.pie(
        df_statut,
        values='Nombre de dossiers',
        names=etape_col,
        title="R√©partition des dossiers par √©tape",
        hole=0.4,
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    fig_pie.update_traces(
        textposition='inside',
        textinfo='percent+label',
        hoverinfo='label+value+percent'
    )
    st.plotly_chart(fig_pie, use_container_width=True)
    
    # 2. √âvolution temporelle des √©tapes
    st.subheader("√âvolution temporelle des √©tapes")
    
    # V√©rifier si une colonne de date est disponible
    date_columns = [col for col in df.columns if 'date' in col.lower() or 'cr√©ation' in col.lower()]
    
    if not date_columns:
        st.warning("‚ö†Ô∏è Aucune colonne de date n'a √©t√© trouv√©e pour l'analyse temporelle.")
    else:
        # Utiliser la premi√®re colonne de date trouv√©e
        date_col = date_columns[0]
        st.info(f"Utilisation de la colonne '{date_col}' pour l'analyse temporelle.")
        
        # S'assurer que la colonne est au format datetime
        df[date_col] = pd.to_datetime(df[date_col], errors='coerce')
        
        # Filtrer les lignes avec des dates valides
        df_with_dates = df.dropna(subset=[date_col])
        
        if df_with_dates.empty:
            st.warning(f"‚ö†Ô∏è Aucune date valide dans la colonne '{date_col}'.")
        else:
            # Ajouter une colonne pour le mois
            df_with_dates['Mois'] = df_with_dates[date_col].dt.strftime('%Y-%m')
            
            # Cr√©er un tableau crois√© dynamique: Mois x √âtape
            pivot = pd.crosstab(
                index=df_with_dates['Mois'],
                columns=df_with_dates[etape_col],
                margins=True,
                margins_name='Total'
            )
            
            # Trier par mois
            pivot = pivot.sort_index()
            
            # Afficher le tableau
            st.write("#### √âvolution mensuelle des √©tapes")
            st.dataframe(pivot)
            
            # Cr√©er un graphique d'√©volution
            # Pr√©parer les donn√©es pour le graphique (sans la ligne Total)
            pivot_for_chart = pivot.drop('Total')
            
            # Convertir le pivot en format long pour Plotly
            df_long = pivot_for_chart.reset_index().melt(
                id_vars=['Mois'],
                var_name='√âtape',
                value_name='Nombre de dossiers'
            )
            
            # Cr√©er le graphique d'√©volution
            fig_evolution = px.line(
                df_long,
                x='Mois',
                y='Nombre de dossiers',
                color='√âtape',
                markers=True,
                title="√âvolution mensuelle des √©tapes",
                line_shape='linear'
            )
            fig_evolution.update_layout(xaxis_title="Mois", yaxis_title="Nombre de dossiers")
            st.plotly_chart(fig_evolution, use_container_width=True)
            
            # Cr√©er un graphique en barres empil√©es
            fig_stacked = px.bar(
                df_long,
                x='Mois',
                y='Nombre de dossiers',
                color='√âtape',
                title="R√©partition mensuelle des √©tapes",
                barmode='stack'
            )
            fig_stacked.update_layout(xaxis_title="Mois", yaxis_title="Nombre de dossiers")
            st.plotly_chart(fig_stacked, use_container_width=True)
            
            # Exporter en CSV
            create_download_button(pivot, "evolution_etapes_immo", "etapes_evolution")
    
    # 3. Analyse crois√©e √âtape x Conseiller
    st.subheader("Analyse crois√©e √âtape x Conseiller")
    
    # V√©rifier si la colonne Conseiller existe et l'ajouter si n√©cessaire
    df_with_conseiller = extract_conseiller(df.copy())
    
    if 'Conseiller' not in df_with_conseiller.columns:
        st.warning("‚ö†Ô∏è Aucune colonne de conseiller n'a √©t√© trouv√©e pour l'analyse crois√©e.")
    else:
        # Cr√©er un tableau crois√© dynamique: Conseiller x √âtape
        pivot_conseiller = pd.crosstab(
            index=df_with_conseiller['Conseiller'],
            columns=df_with_conseiller[etape_col],
            margins=True,
            margins_name='Total'
        )
        
        # Trier par nombre total de dossiers d√©croissant
        pivot_conseiller = pivot_conseiller.sort_values('Total', ascending=False)
        
        # Afficher le tableau
        st.write("#### R√©partition des √©tapes par conseiller")
        st.dataframe(pivot_conseiller)
        
        # S√©lectionner un conseiller pour analyse d√©taill√©e
        conseillers = ['Tous'] + sorted(df_with_conseiller['Conseiller'].unique().tolist())
        conseiller_selectionne = st.selectbox("S√©lectionner un conseiller pour l'analyse d√©taill√©e", conseillers)
        
        if conseiller_selectionne != 'Tous':
            # Filtrer les donn√©es pour le conseiller s√©lectionn√©
            df_conseiller = df_with_conseiller[df_with_conseiller['Conseiller'] == conseiller_selectionne]
            
            # Compter le nombre de dossiers par √©tape pour ce conseiller
            df_statut_conseiller = df_conseiller.groupby(etape_col).size().reset_index(name='Nombre de dossiers')
            df_statut_conseiller = df_statut_conseiller.sort_values('Nombre de dossiers', ascending=False)
            
            # Cr√©er un graphique en camembert pour ce conseiller
            fig_conseiller = px.pie(
                df_statut_conseiller,
                values='Nombre de dossiers',
                names=etape_col,
                title=f"R√©partition des √©tapes pour {conseiller_selectionne}",
                hole=0.4
            )
            fig_conseiller.update_traces(
                textposition='inside',
                textinfo='percent+label',
                hoverinfo='label+value+percent'
            )
            st.plotly_chart(fig_conseiller, use_container_width=True)
        
        # Exporter en CSV
        create_download_button(pivot_conseiller, "etapes_conseillers_immo", "etapes_conseillers")
    
    # 4. Analyse des transitions d'√©tape (si des dates de mise √† jour sont disponibles)
    st.subheader("Analyse des d√©lais par √©tape")
    
    # V√©rifier si des colonnes de date de cr√©ation et de mise √† jour sont disponibles
    date_creation_cols = [col for col in df.columns if 'cr√©ation' in col.lower() or 'creation' in col.lower()]
    date_maj_cols = [col for col in df.columns if 'maj' in col.lower() or 'update' in col.lower() or 'modif' in col.lower()]
    
    if not date_creation_cols or not date_maj_cols:
        st.warning("‚ö†Ô∏è Colonnes de dates insuffisantes pour l'analyse des d√©lais.")
    else:
        # Utiliser les premi√®res colonnes trouv√©es
        date_creation_col = date_creation_cols[0]
        date_maj_col = date_maj_cols[0]
        
        st.info(f"Utilisation des colonnes '{date_creation_col}' et '{date_maj_col}' pour l'analyse des d√©lais.")
        
        # S'assurer que les colonnes sont au format datetime
        df[date_creation_col] = pd.to_datetime(df[date_creation_col], errors='coerce')
        df[date_maj_col] = pd.to_datetime(df[date_maj_col], errors='coerce')
        
        # Calculer le d√©lai en jours
        df['D√©lai (jours)'] = (df[date_maj_col] - df[date_creation_col]).dt.days
        
        # Filtrer les lignes avec des d√©lais valides
        df_with_delays = df.dropna(subset=['D√©lai (jours)'])
        
        if df_with_delays.empty:
            st.warning("‚ö†Ô∏è Impossible de calculer des d√©lais valides.")
        else:
            # Calculer le d√©lai moyen par √©tape
            delay_by_status = df_with_delays.groupby(etape_col)['D√©lai (jours)'].agg(['mean', 'median', 'min', 'max']).reset_index()
            delay_by_status['mean'] = delay_by_status['mean'].round(1)
            delay_by_status['median'] = delay_by_status['median'].round(1)
            
            # Renommer les colonnes
            delay_by_status.columns = [etape_col, 'D√©lai moyen (jours)', 'D√©lai m√©dian (jours)', 'D√©lai minimum (jours)', 'D√©lai maximum (jours)']
            
            # Trier par d√©lai moyen d√©croissant
            delay_by_status = delay_by_status.sort_values('D√©lai moyen (jours)', ascending=False)
            
            # Afficher le tableau
            st.write("#### D√©lais moyens par √©tape")
            st.dataframe(delay_by_status)
            
            # Cr√©er un graphique en barres pour les d√©lais moyens
            fig_delays = px.bar(
                delay_by_status,
                x=etape_col,
                y='D√©lai moyen (jours)',
                text='D√©lai moyen (jours)',
                title="D√©lai moyen par √©tape (jours)",
                color=etape_col
            )
            fig_delays.update_layout(xaxis_title="√âtape", yaxis_title="D√©lai moyen (jours)")
            st.plotly_chart(fig_delays, use_container_width=True)
            
            # Exporter en CSV
            create_download_button(delay_by_status, "delais_etapes_immo", "delais_etapes")
    
    # 5. Filtrage et exploration des dossiers par √©tape
    st.subheader("Exploration des dossiers par √©tape")
    
    # S√©lectionner une √©tape pour explorer les dossiers
    etapes = ['Tous'] + sorted(df[etape_col].unique().tolist())
    etape_selectionnee = st.selectbox("S√©lectionner une √©tape √† explorer", etapes)
    
    if etape_selectionnee != 'Tous':
        # Filtrer les donn√©es pour l'√©tape s√©lectionn√©e
        df_filtered = df[df[etape_col] == etape_selectionnee]
        
        # Afficher le nombre de dossiers
        st.write(f"#### {len(df_filtered)} dossiers avec l'√©tape '{etape_selectionnee}'")
        
        # Afficher les dossiers
        st.dataframe(df_filtered)
        
        # Exporter en CSV
        create_download_button(df_filtered, f"dossiers_{etape_selectionnee.lower().replace(' ', '_')}_immo", f"dossiers_{etape_selectionnee}")
    else:
        st.info("S√©lectionnez une √©tape sp√©cifique pour voir les dossiers correspondants.")
