import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime, timedelta
import re
import sys
import os

# Ajouter le r√©pertoire parent au chemin pour pouvoir importer les fonctions utilitaires
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.data_processing import safe_to_datetime, safe_to_numeric
from utils.export import create_download_button

# D√©finition des colonnes strictement autoris√©es
# Cette liste est la SEULE r√©f√©rence pour toutes les op√©rations
COLONNES_AUTORISEES = {
    # Colonnes strictes du fichier source (seules ces colonnes seront import√©es)
    "source": [
        "Nom de l'opportunit√©",
        "Produit",
        "Statut",
        "√âtape",
        "Montant",
        "Montant des frais",
        "Type d'investissement",
        "Conseiller",
        "Date de souscription",
        "Date de validation",
   ],
    # Colonnes d√©riv√©es n√©cessaires au fonctionnement
    "derivees": [
        "Montant du placement",
        "Date de souscription",
        "Mois",
        "Premier_Jour_Mois",
        "Dernier_Jour_Mois"
    ]
}

# Mapping des colonnes alternatives vers les noms standard
COLONNE_MAPPING = {
    "Conseiller": "Conseiller",
    "Date de souscription": "Date de souscription",
    "Date de validation": "Date de validation"
}

# Importer les fonctions adapt√©es pour l'analyse sans colonne Produit
from analyses.utils_analyse import analyse_collecte_produit_conseiller_fallback, analyse_performance_conseiller_fallback, extract_conseiller

# Constantes
OBJECTIF_MENSUEL_EPARGNE = 2000000  # Objectif mensuel pour l'√©pargne (2M‚Ç¨)


def adjust_dates_to_month_range(df, date_column):
    """Ajoute les colonnes de premier et dernier jour du mois pour chaque entr√©e."""
    df = df.copy()
    
    # Extraire le premier jour du mois
    df['Premier_Jour_Mois'] = df[date_column].dt.to_period('M').dt.start_time
    
    # Extraire le dernier jour du mois
    df['Dernier_Jour_Mois'] = df[date_column].dt.to_period('M').dt.end_time
    
    return df

def analyser_souscriptions_epargne(df_original):
    """Analyse des souscriptions √âpargne avec un contr√¥le strict des colonnes.
    
    Cette fonction applique un contr√¥le strict des colonnes utilis√©es dans l'analyse:
    1. Seules les colonnes explicitement list√©es dans COLONNES_AUTORISEES["source"] sont import√©es
    2. Aucune colonne parasite n'est autoris√©e
    3. Les colonnes d√©riv√©es sont cr√©√©es uniquement √† partir des colonnes sources autoris√©es
    
    Args:
        df_original: DataFrame contenant les donn√©es brutes
        
    Returns:
        DataFrame trait√© ou None en cas d'erreur
    """
    
    # DIAGNOSTIC: V√©rifier les colonnes dans le DataFrame original
    st.write("### DIAGNOSTIC INITIAL: Colonnes dans le DataFrame original")
    st.write(f"Colonnes disponibles dans df_original: {df_original.columns.tolist()}")
    st.write(f"'Conseiller' existe dans df_original: {'Conseiller' in df_original.columns}")
    st.write(f"'Conseiller' existe dans df_original: {'Conseiller' in df_original.columns}")
    if 'Conseiller' in df_original.columns:
        st.write("Exemples de valeurs 'Conseiller':", df_original['Conseiller'].head(3).tolist())
    
    st.header("üìä Analyse des Souscriptions √âpargne")
    
    # Afficher un message d'information sur les colonnes attendues
    st.info("""
    üìù **Colonnes strictement requises dans le fichier source**:
    - "Nom de l'opportunit√©" (texte)
    - "Produit" (texte)
    - "Statut" (texte)
    - "√âtape" (texte)
    - "Montant" (nombre)
    - "Montant des frais" (nombre)
    - "Type d'investissement" (texte)
    - "Conseiller" (texte)
    - "Date de souscription" (date au format jj/mm/aaaa)
    - "Date de validation" (date au format jj/mm/aaaa)
    
    ‚ÑπÔ∏è **Important**: Les noms des colonnes doivent correspondre **exactement** √† ceux list√©s ci-dessus.
    Toute colonne non list√©e sera ignor√©e. Toute colonne manquante sera signal√©e.
    """)
    
    # 1. DIAGNOSTIC DES COLONNES DU FICHIER SOURCE
    st.subheader("üîç Diagnostic des colonnes du fichier source")
    
    # Afficher les colonnes du fichier original pour diagnostic
    colonnes_originales = df_original.columns.tolist()
    st.write("Colonnes pr√©sentes dans le fichier source:")
    st.write(colonnes_originales)
    
    # Cr√©er une liste des colonnes requises apr√®s avoir pris en compte les alternatives
    colonnes_requises_base = ["Nom de l'opportunit√©", "Produit", "Statut", "√âtape", "Montant", "Montant des frais", "Type d'investissement"]
    colonnes_requises_alternatives = {
        "Conseiller": ["Conseiller", "Conseiller"],
        "Date de souscription": ["Date de souscription", "Date de souscription"],
        "Date de validation": ["Date de validation", "Date de validation"]
    }
    
    # V√©rifier les colonnes manquantes en tenant compte des alternatives
    colonnes_manquantes = []
    for col in colonnes_requises_base:
        if col not in colonnes_originales:
            colonnes_manquantes.append(col)
    
    # V√©rifier les colonnes avec alternatives
    for col_standard, alternatives in colonnes_requises_alternatives.items():
        if not any(alt in colonnes_originales for alt in alternatives):
            colonnes_manquantes.append(f"{col_standard} (ou alternatives: {', '.join([alt for alt in alternatives if alt != col_standard])})")
    
    if colonnes_manquantes:
        st.warning(f"‚ö†Ô∏è Colonnes requises manquantes: {colonnes_manquantes}")
        st.error(f"Colonnes manquantes dans le fichier: {colonnes_manquantes}")
        st.write("Colonnes disponibles dans le fichier:", colonnes_originales)
    else:
        st.success("‚úÖ Toutes les colonnes requises sont pr√©sentes (ou leurs alternatives)")
        
    # Cr√©er un mapping des colonnes pour ce fichier sp√©cifique
    mapping_fichier = {}
    for col_standard, alternatives in colonnes_requises_alternatives.items():
        for alt in alternatives:
            if alt in colonnes_originales and alt != col_standard:
                mapping_fichier[alt] = col_standard
                st.info(f"Mapping: '{alt}' sera utilis√© comme '{col_standard}'")
                break
    
    # Identifier les colonnes parasites dans le fichier original
    colonnes_parasites = [col for col in colonnes_originales if col not in COLONNES_AUTORISEES["source"]]
    if colonnes_parasites:
        st.warning(f"‚ö†Ô∏è Colonnes parasites d√©tect√©es (seront ignor√©es): {colonnes_parasites}")
    
    # 1.5 STANDARDISATION DES COLONNES
    st.subheader("üîç Standardisation des colonnes")
    
    # DIAGNOSTIC: Avant extract_conseiller
    st.write("### DIAGNOSTIC: Avant extract_conseiller")
    st.write(f"Colonnes disponibles avant extract_conseiller: {df_original.columns.tolist()}")
    
    # Appliquer extract_conseiller sur le DataFrame original pour identifier la colonne Conseiller
    df_with_conseiller = extract_conseiller(df_original)
    
    # DIAGNOSTIC: Apr√®s extract_conseiller
    st.write("### DIAGNOSTIC: Apr√®s extract_conseiller")
    st.write(f"Colonnes disponibles apr√®s extract_conseiller: {df_with_conseiller.columns.tolist()}")
    st.write(f"'Conseiller' existe dans df_with_conseiller: {'Conseiller' in df_with_conseiller.columns}")
    
    # V√©rifier si la colonne Conseiller a √©t√© correctement extraite
    if 'Conseiller' in df_with_conseiller.columns:
        st.success(f"‚úÖ Colonne 'Conseiller' identifi√©e ou cr√©√©e avec succ√®s")
        # Afficher quelques exemples de conseillers identifi√©s
        st.write("Exemples de conseillers identifi√©s:")
        st.write(df_with_conseiller['Conseiller'].head(5).tolist())
    else:
        st.error(f"‚ùå Impossible d'extraire ou de cr√©er la colonne 'Conseiller'")
    
    # 2. IMPORTATION STRICTE DES COLONNES AUTORIS√âES
    st.subheader("üîí Importation stricte des colonnes")
    
    df_strict = pd.DataFrame()
    
    # Copier UNIQUEMENT les colonnes autoris√©es qui existent dans le fichier source
    # en tenant compte du mapping des colonnes alternatives
    for col_standard in COLONNES_AUTORISEES["source"]:
        # Cas sp√©cial pour la colonne Conseiller qui est d√©j√† trait√©e par extract_conseiller
        if col_standard == 'Conseiller' and 'Conseiller' in df_with_conseiller.columns:
            # Utiliser la colonne Conseiller standardis√©e
            df_strict[col_standard] = df_with_conseiller['Conseiller'].copy()
            st.success(f"‚úÖ Colonne '{col_standard}' import√©e depuis la version standardis√©e")
            continue
            
        # V√©rifier si la colonne standard existe directement
        if col_standard in df_original.columns:
            df_strict[col_standard] = df_original[col_standard].copy()
            st.success(f"‚úÖ Colonne '{col_standard}' import√©e avec succ√®s")
        else:
            # Chercher une alternative dans le mapping
            alternative_trouvee = False
            for alt_col, std_col in mapping_fichier.items():
                if std_col == col_standard and alt_col in df_original.columns:
                    df_strict[col_standard] = df_original[alt_col].copy()
                    st.success(f"‚úÖ Colonne '{col_standard}' import√©e depuis '{alt_col}'")
                    alternative_trouvee = True
                    break
            
            if not alternative_trouvee:
                st.warning(f"‚ö†Ô∏è Colonne '{col_standard}' non trouv√©e dans le fichier source (ni ses alternatives)")
                
    # Afficher un r√©sum√© des colonnes import√©es
    st.write("Colonnes import√©es dans le DataFrame strict:")
    st.write(df_strict.columns.tolist())
    
    # DIAGNOSTIC: Apr√®s filtrage strict des colonnes
    st.write("### DIAGNOSTIC: Apr√®s filtrage strict des colonnes")
    st.write(f"Colonnes disponibles dans df_strict: {df_strict.columns.tolist()}")
    st.write(f"'Conseiller' existe dans df_strict: {'Conseiller' in df_strict.columns}")
    if 'Conseiller' in df_strict.columns:
        st.write("Exemples de valeurs 'Conseiller' dans df_strict:", df_strict['Conseiller'].head(3).tolist())
            

    # DIAGNOSTIC: Apr√®s purge_parasitic_columns
    st.write(f"Colonnes disponibles apr√®s purge: {df_strict.columns.tolist()}")
    st.write(f"'Conseiller' existe apr√®s purge: {'Conseiller' in df_strict.columns}")
    if 'Conseiller' in df_strict.columns:
        st.write("Exemples de valeurs 'Conseiller' apr√®s purge:", df_strict['Conseiller'].head(3).tolist())
    
    # Afficher un aper√ßu du DataFrame strictement filtr√©
    st.write("Aper√ßu du DataFrame apr√®s filtrage strict des colonnes:")
    st.dataframe(df_strict.head())
    
    # 3. PR√âTRAITEMENT DES DONN√âES
    st.subheader("üîß Pr√©traitement des donn√©es")
    
    # V√©rifier si le DataFrame contient des donn√©es
    if df_strict.empty:
        st.error("‚õî Le DataFrame est vide apr√®s filtrage des colonnes. V√©rifiez que votre fichier source contient les colonnes requises.")
        return None
    
    # V√©rifier si la colonne 'Conseiller' existe dans df_strict, sinon la cr√©er √† partir de 'Conseiller'
    if 'Conseiller' not in df_strict.columns:
        if 'Conseiller' in df_original.columns:
            st.warning("‚ö†Ô∏è Colonne 'Conseiller' manquante. Cr√©ation √† partir de la colonne 'Conseiller'.")
            df_strict['Conseiller'] = df_original['Conseiller'].copy()
        else:
            st.warning("‚ö†Ô∏è Colonnes 'Conseiller' et 'Conseiller' manquantes. Cr√©ation d'une colonne par d√©faut.")
            df_strict['Conseiller'] = 'Inconnu'
    
    # Pr√©traiter les donn√©es
    df_clean, colonnes_potentielles = pretraiter_donnees(df_strict)
    
    # Conversion des dates (format jj/mm/aaaa)
    # V√©rifier si nous avons une colonne de date (soit 'Date de souscription' soit 'Date de souscription')
    date_col = None
    if "Date de souscription" in df_strict.columns:
        date_col = "Date de souscription"
    elif "Date de souscription" in df_strict.columns:
        date_col = "Date de souscription"
    
    if date_col:
        st.write(f"Conversion de la colonne '{date_col}' en date...")
        # Afficher quelques exemples de dates avant conversion
        st.write(f"Exemples de dates avant conversion: {df_strict[date_col].head(3).tolist()}")
        
        # Convertir en datetime et cr√©er/remplacer la colonne standard 'Date de souscription'
        df_strict["Date de souscription"] = safe_to_datetime(df_strict[date_col])
        
        # Afficher quelques exemples de dates apr√®s conversion
        st.write(f"Exemples de dates apr√®s conversion: {df_strict['Date de souscription'].head(3).tolist()}")
        
        # V√©rifier si la conversion a r√©ussi
        missing_dates = df_strict["Date de souscription"].isna().sum()
        st.write(f"Nombre de dates manquantes apr√®s conversion: {missing_dates}")
        
        if missing_dates > 0:
            st.warning(f"‚ö†Ô∏è {missing_dates} dates n'ont pas pu √™tre converties. V√©rifiez le format des dates.")
    else:
        st.error("‚ùå Aucune colonne de date ('Date de souscription' ou 'Date de souscription') n'a √©t√© trouv√©e. Impossible de continuer l'analyse temporelle.")
        return None
    
    # Conversion des montants
    montant_col = None
    if "Montant" in df_strict.columns:
        montant_col = "Montant"
    elif "Montant du placement" in df_strict.columns:
        montant_col = "Montant du placement"
    
    if montant_col:
        st.write(f"Conversion de la colonne '{montant_col}' en nombre...")
        # Nettoyer et convertir la colonne Montant
        df_strict["Montant du placement"] = safe_to_numeric(df_strict[montant_col])
        # Afficher quelques exemples pour v√©rification
        st.write(f"Exemples de montants convertis: {df_strict['Montant du placement'].head(3).tolist()}")
        st.write("Exemples de montants convertis:")
        montant_examples = pd.DataFrame({
            "Original": df_strict[montant_col].head(3),
            "Converti": df_strict["Montant du placement"].head(3)
        })
        st.dataframe(montant_examples)
    else:
        st.warning("‚ö†Ô∏è Colonne 'Montant' manquante. Impossible de cr√©er 'Montant du placement'.")
    
    # Extraction du mois √† partir de la date de souscription
    if "Date de souscription" in df.columns:
        st.write("Extraction du mois √† partir de la date de souscription...")
        df["Mois"] = df["Date de souscription"].dt.strftime("%Y-%m")
        # Afficher les mois disponibles
        mois_disponibles = df["Mois"].unique().tolist()
        st.write(f"Mois disponibles dans les donn√©es: {mois_disponibles}")
    else:
        st.warning("‚ö†Ô∏è Colonne 'Date de souscription' manquante. Impossible de cr√©er 'Mois'.")
    
    # Ajout des colonnes de premier et dernier jour du mois
    if "Date de souscription" in df.columns:
        st.write("Ajout des colonnes de premier et dernier jour du mois...")
        df = adjust_dates_to_month_range(df, "Date de souscription")
    
    
    # V√©rification finale des colonnes
    st.write("Colonnes finales apr√®s pr√©traitement et purge:")
    st.write(df.columns.tolist())
    
    # V√©rification des colonnes non autoris√©es (ne devrait jamais arriver avec cette approche)
    toutes_colonnes_autorisees = COLONNES_AUTORISEES["source"] + COLONNES_AUTORISEES["derivees"]
    colonnes_non_autorisees = [col for col in df.columns if col not in toutes_colonnes_autorisees]
    if colonnes_non_autorisees:
        st.error(f"‚õî ERREUR CRITIQUE: Des colonnes non autoris√©es sont pr√©sentes apr√®s pr√©traitement: {colonnes_non_autorisees}")
        # Suppression d'urgence des colonnes non autoris√©es
        df = df.drop(columns=colonnes_non_autorisees)
        st.success("Colonnes non autoris√©es supprim√©es avec succ√®s.")
    
    # Afficher un aper√ßu du DataFrame apr√®s pr√©traitement
    st.write("Aper√ßu du DataFrame apr√®s pr√©traitement:")
    st.dataframe(df.head())
    
    # Afficher un message d'information sur les colonnes attendues
    st.info("""
    üìù **Colonnes attendues dans le fichier**:
    - "Nom de l'opportunit√©" (texte)
    - "Produit" (texte)
    - "Statut" (texte)
    - "√âtape" (texte)
    - "Montant" (nombre)
    - "Montant des frais" (nombre)
    - "Type d'investissement" (texte)
    - "Conseiller" (texte)
    - "Date de souscription" (date au format jj/mm/aaaa)
    - "Date de validation" (date au format jj/mm/aaaa)
    
    ‚ÑπÔ∏è **Important**: Les noms des colonnes doivent correspondre **exactement** √† ceux list√©s ci-dessus.
    """)
    
    # FILTRAGE STRICT D√àS L'IMPORTATION: Cr√©er un nouveau DataFrame vide qui ne contiendra
    # que les colonnes explicitement sp√©cifi√©es par l'utilisateur
    st.subheader("‚ö†Ô∏è FILTRAGE STRICT DES COLONNES")
    st.write("Seules les colonnes explicitement sp√©cifi√©es sont conserv√©es, toutes les autres sont ignor√©es.")
    
    # Afficher les colonnes du fichier original pour diagnostic
    st.write("Colonnes pr√©sentes dans le fichier original:")
    st.write(df_original.columns.tolist())
    
    # Identifier les colonnes parasites dans le fichier original
    colonnes_parasites_original = [col for col in df_original.columns if col not in colonnes_strictes]
    if colonnes_parasites_original:
        st.warning(f"‚ö†Ô∏è ATTENTION: Colonnes parasites d√©tect√©es dans le fichier original: {colonnes_parasites_original}")
        st.write("Ces colonnes seront ignor√©es dans l'analyse.")
    
    # Cr√©er un DataFrame vide avec le m√™me index que l'original
    df = pd.DataFrame(index=df_original.index)
    
    # Liste STRICTE des colonnes attendues - EXACTEMENT comme fournies par l'utilisateur
    colonnes_strictes = [
        "Nom de l'opportunit√©",
        "Produit",
        "Statut",
        "√âtape",
        "Montant",
        "Montant des frais",
        "Type d'investissement",
        "Conseiller",
        "Date de souscription",
        "Date de validation"
    ]
    
    # IMPORTANT: Cette liste est la SEULE r√©f√©rence, sans aucune variation ni mapping
    # Toute colonne non pr√©sente dans cette liste sera ignor√©e
    # Toute colonne pr√©sente dans cette liste mais absente du fichier sera signal√©e
    
    # Ne copier QUE les colonnes qui existent dans le fichier original
    colonnes_trouvees = []
    colonnes_manquantes = []
    for col in colonnes_strictes:
        if col in df_original.columns:
            df[col] = df_original[col]
            colonnes_trouvees.append(col)
            st.success(f"‚úÖ Colonne '{col}' trouv√©e et conserv√©e")
        else:
            colonnes_manquantes.append(col)
            st.warning(f"‚ö†Ô∏è Colonne '{col}' non trouv√©e dans le fichier original")
    
    # Afficher les colonnes conserv√©es apr√®s filtrage strict
    st.write("Colonnes conserv√©es apr√®s filtrage strict:")
    st.write(df.columns.tolist())
    
    # CORRECTION: D√©finir explicitement les colonnes attendues avec leur type
    colonnes_attendues_types = {
        "Nom de l'opportunit√©": "string",
        "Produit": "string",
        "Statut": "string",
        "√âtape": "string",
        "Montant": "float",
        "Montant des frais": "float",
        "Type d'investissement": "string",
        "Conseiller": "string",
        "Date de souscription": "date",
        "Date de validation": "date"
    }
    
    # Afficher les colonnes attendues
    st.subheader("Colonnes attendues")
    for col, type_col in colonnes_attendues_types.items():
        st.write(f"- {col} ({type_col})")
    
    # Afficher les colonnes disponibles dans le fichier
    st.subheader("Colonnes disponibles dans le fichier")
    st.write(df.columns.tolist())
    
    # V√©rifier si les colonnes attendues sont pr√©sentes
    colonnes_manquantes = [col for col in colonnes_attendues_types.keys() if col not in df.columns]
    if colonnes_manquantes:
        st.warning(f"Colonnes attendues manquantes: {', '.join(colonnes_manquantes)}")
    
    # Afficher un aper√ßu des donn√©es pour v√©rification
    with st.expander("Aper√ßu des donn√©es brutes"):
        st.dataframe(df.head(10))
    
    # Fonction pour assurer la compatibilit√© des types avec PyArrow/Streamlit
    def ensure_pyarrow_compatibility(df):
        """Assure que toutes les colonnes du DataFrame sont compatibles avec PyArrow."""
        df_clean = df.copy()
        
        # Convertir explicitement les colonnes probl√©matiques en types compatibles
        for col in df_clean.columns:
            # Convertir les colonnes de type 'object' en string pour √©viter les erreurs PyArrow
            if df_clean[col].dtype == 'object':
                # Pour les colonnes num√©riques, essayer d'abord la conversion en float
                if col.lower().find('montant') >= 0 or col.lower().find('frais') >= 0:
                    try:
                        df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce').fillna(0).astype('float64')
                    except:
                        df_clean[col] = df_clean[col].astype(str)
                # Pour les autres colonnes de type object, convertir en string
                else:
                    df_clean[col] = df_clean[col].fillna('').astype(str)
        
        return df_clean
        
    # Fonction de pr√©traitement robuste pour analyser la structure du fichier
    def pretraiter_donnees(df):
        """Pr√©traite les donn√©es pour l'analyse des souscriptions √©pargne."""
        # Cr√©er une copie du DataFrame pour √©viter de modifier l'original
        df_clean = df.copy()
        
        # Afficher les types de donn√©es pour chaque colonne
        with st.expander("Types de donn√©es par colonne"):
            st.write(df_clean.dtypes)
        
        # Extraire et standardiser la colonne Conseiller
        st.write("### Extraction et standardisation de la colonne Conseiller")
        df_clean = extract_conseiller(df_clean)
        
        # Rechercher les colonnes potentielles pour chaque cat√©gorie
        colonnes_potentielles = {
            'date': [],
            'montant': [],
            'produit': [],
            'etape': [],
            'frais': [],
        }
        
        # Afficher les colonnes potentielles d√©tect√©es
        with st.expander("Colonnes potentielles d√©tect√©es par cat√©gorie"):
            st.write(colonnes_potentielles)
        
        return df_clean, colonnes_potentielles
    
    # Utiliser EXACTEMENT les colonnes fournies par l'utilisateur
    # Structure cible: ["Nom de l'opportunit√©" (str), "Produit" (str), "Statut" (str), "√âtape" (str), 
    #                  "Montant" (float), "Montant des frais" (float), "Type d'investissement" (str), 
    #                  "Conseiller" (str), "Date de souscription" (date), "Date de validation" (date)]
    
    # Liste exacte des colonnes √† prendre en compte, dans l'ordre sp√©cifi√© par l'utilisateur
    colonnes_exactes = [
        "Nom de l'opportunit√©",
        "Produit",
        "Statut",
        "√âtape",
        "Montant",
        "Montant des frais",
        "Type d'investissement",
        "Conseiller",
        "Date de souscription",
        "Date de validation"
    ]
    
    # Liste STRICTE des colonnes attendues (exactement comme sp√©cifi√© par l'utilisateur)
    colonnes_strictes = [
        "Nom de l'opportunit√©",
        "Produit",
        "Statut",
        "√âtape",
        "Montant",
        "Montant des frais",
        "Type d'investissement",
        "Conseiller",
        "Date de souscription",
        "Date de validation"
    ]
    
    # Afficher la liste exacte des colonnes attendues
    st.subheader("Colonnes attendues (format exact)")
    for i, col in enumerate(colonnes_strictes):
        st.write(f"{i}: \"{col}\"")
    
    # Afficher les colonnes disponibles dans le fichier pour debug
    st.write("Colonnes disponibles dans le fichier:")
    st.write(df.columns.tolist())
    
    # V√©rifier si toutes les colonnes attendues sont pr√©sentes
    colonnes_manquantes_fichier = [col for col in colonnes_strictes if col not in df.columns]
    
    if colonnes_manquantes_fichier:
        st.warning(f"‚ö†Ô∏è Attention: Les colonnes suivantes sont attendues mais absentes du fichier: {', '.join(colonnes_manquantes_fichier)}")
    
    # Cr√©er une copie du DataFrame pour √©viter de modifier l'original
    df_mapped = df.copy()
    
    # Pr√©traiter les donn√©es pour analyser la structure du fichier
    df_clean, colonnes_potentielles = pretraiter_donnees(df)
    
    # SUPPRESSION DU MAPPING AUTOMATIQUE - Utilisation stricte des colonnes sp√©cifi√©es
    st.subheader("Utilisation stricte des colonnes sp√©cifi√©es")
    st.write("Le dashboard utilise UNIQUEMENT les colonnes exactes sp√©cifi√©es, sans mapping automatique ni alternatives.")
    
    # Pas de mapping manuel - utilisation stricte des colonnes sp√©cifi√©es
    mapping_manuel = {}
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.write("**Colonnes essentielles**")
        # Date de souscription
        options_date = ["Automatique"] + ["Date de souscription", "Date de souscription", "Date de validation"] + list(df.columns)
        date_col = st.selectbox("Colonne Date de souscription", options=options_date, key="date_col")
        if date_col != "Automatique" and date_col != "Aucune":
            mapping_manuel['Date de souscription'] = date_col
        
        # Montant du placement
        options_montant = ["Automatique"] + ["Montant", "Montant du placement", "Montant des frais"] + list(df.columns)
        montant_col = st.selectbox("Colonne Montant du placement", options=options_montant, key="montant_col")
        if montant_col != "Automatique" and montant_col != "Aucune":
            mapping_manuel['Montant du placement'] = montant_col
            
        # Conseiller
        options_conseiller = ["Automatique"] + ["Conseiller"] + list(df.columns)
        conseiller_col = st.selectbox("Colonne Conseiller", options=options_conseiller, key="conseiller_col")
        if conseiller_col != "Automatique" and conseiller_col != "Aucune":
            mapping_manuel['Conseiller'] = conseiller_col
    
    with col2:
        st.write("**Colonnes produit/type**")
        # Type d'investissement
        options_type = ["Automatique"] + ["Type d'investissement"] + list(df.columns)
        type_col = st.selectbox("Colonne Type d'investissement", options=options_type, key="type_col")
        if type_col != "Automatique" and type_col != "Aucune":
            mapping_manuel['Type d\'investissement'] = type_col
        
        # Produit
        options_produit = ["Automatique"] + ["Produit"] + list(df.columns)
        produit_col = st.selectbox("Colonne Produit", options=options_produit, key="produit_col")
        if produit_col != "Automatique" and produit_col != "Aucune":
            mapping_manuel['Produit'] = produit_col
            
        # Nom opportunit√©
        options_opportunite = ["Automatique"] + ["Nom de l'opportunit√©"] + list(df.columns)
        opportunite_col = st.selectbox("Colonne Nom opportunit√©", options=options_opportunite, key="opportunite_col")
        if opportunite_col != "Automatique" and opportunite_col != "Aucune":
            mapping_manuel['Nom opportunit√©'] = opportunite_col
    
    with col3:
        st.write("**Colonnes statut/√©tape**")
        # √âtape
        options_etape = ["Automatique"] + ["√âtape"] + list(df.columns)
        etape_col = st.selectbox("Colonne √âtape", options=options_etape, key="etape_col")
        if etape_col != "Automatique" and etape_col != "Aucune":
            mapping_manuel['√âtape'] = etape_col
            
        # Statut
        options_statut = ["Automatique"] + ["Statut"] + list(df.columns)
        statut_col = st.selectbox("Colonne Statut", options=options_statut, key="statut_col")
        if statut_col != "Automatique" and statut_col != "Aucune":
            mapping_manuel['Statut'] = statut_col
            
        # Frais
        options_frais = ["Automatique"] + ["Montant des frais", "Frais"] + list(df.columns)
        frais_col = st.selectbox("Colonne Frais", options=options_frais, key="frais_col")
        if frais_col != "Automatique" and frais_col != "Aucune":
            mapping_manuel['Frais'] = frais_col
    
    # Appliquer le mapping manuel ou automatique
    df_mapped = df.copy()
    colonnes_trouvees = {}
    colonnes_manquantes = []
    
    # UTILISATION STRICTE DES COLONNES - Sans mapping automatique ni alternatives
    # Seules les colonnes exactement nomm√©es comme sp√©cifi√© sont utilis√©es
    for col in colonnes_strictes:
        if col in df_mapped.columns:
            # La colonne existe exactement comme sp√©cifi√©e, on la conserve telle quelle
            colonnes_trouvees[col] = col
            st.success(f"Colonne '{col}' trouv√©e exactement comme sp√©cifi√©e")
        else:
            # La colonne n'existe pas avec ce nom exact, elle est consid√©r√©e comme manquante
            colonnes_manquantes.append(col)
            st.warning(f"\u26a0\ufe0f La colonne '{col}' n'existe pas dans le fichier avec ce nom exact")
    
    # Cr√©ation des colonnes d√©riv√©es UNIQUEMENT √† partir des colonnes r√©ellement pr√©sentes
    # Ne pas cr√©er de colonne d√©riv√©e si la colonne source n'existe pas
    
    # Colonne "Date de souscription" d√©riv√©e de "Date de souscription"
    if "Date de souscription" in df.columns:
        # Cr√©er la colonne d√©riv√©e uniquement si la colonne source existe r√©ellement
        df_mapped["Date de souscription"] = df["Date de souscription"]
        colonnes_trouvees["Date de souscription"] = "Date de souscription"
        st.success(f"Colonne d√©riv√©e 'Date de souscription' cr√©√©e √† partir de 'Date de souscription'")
    else:
        st.warning(f"Impossible de cr√©er la colonne d√©riv√©e 'Date de souscription' car 'Date de souscription' n'existe pas")
    
    # Colonne "Montant du placement" d√©riv√©e de "Montant"
    if "Montant" in df.columns:
        # Cr√©er la colonne d√©riv√©e uniquement si la colonne source existe r√©ellement
        df_mapped["Montant du placement"] = df["Montant"]
        colonnes_trouvees["Montant du placement"] = "Montant"
        st.success(f"Colonne d√©riv√©e 'Montant du placement' cr√©√©e √† partir de 'Montant'")
    else:
        st.warning(f"Impossible de cr√©er la colonne d√©riv√©e 'Montant du placement' car 'Montant' n'existe pas")
    
    # Afficher les colonnes manquantes
    if colonnes_manquantes:
        st.warning(f"Colonnes non trouv√©es: {', '.join(colonnes_manquantes)}")
    
    # Afficher un r√©sum√© du mapping final
    with st.expander("R√©sum√© du mapping final des colonnes"):
        st.write(colonnes_trouvees)
    
    # IMPORTANT: Ne cr√©er que les colonnes qui existent r√©ellement dans le fichier source
    # Cr√©er un nouveau DataFrame avec uniquement les colonnes existantes
    df_clean = pd.DataFrame(index=df.index)
    
    # Ne copier que les colonnes qui existent r√©ellement dans le fichier source
    for col in colonnes_strictes:
        if col in df.columns:
            # Si la colonne existe, la copier directement
            df_clean[col] = df[col]
            st.success(f"Colonne '{col}' trouv√©e directement dans le fichier source")
    
    # Avertir pour les colonnes manquantes mais ne pas les cr√©er
    for col in colonnes_strictes:
        if col not in df.columns:
            st.warning(f"Colonne '{col}' non trouv√©e dans le fichier source - cette colonne ne sera pas utilis√©e dans l'analyse")
    
    # Remplacer le DataFrame original par le DataFrame avec uniquement les colonnes exactes
    df = df_clean.copy()
    
    # V√©rifier que l'ordre des colonnes correspond exactement √† celui sp√©cifi√©
    if df.columns.tolist() != colonnes_exactes:
        st.warning("R√©organisation des colonnes selon l'ordre sp√©cifi√©...")
        df = df[colonnes_exactes]
    
    # Utiliser directement le DataFrame nettoy√©
    df_epargne = df.copy()
    
    # V√©rification finale des colonnes
    # Cr√©er une copie du DataFrame pour l'analyse
    df_epargne = df.copy()
    
    # IMPORTANT: Ne conserver que les colonnes strictement sp√©cifi√©es
    colonnes_a_conserver = [col for col in colonnes_strictes if col in df_epargne.columns]
    df_epargne = df_epargne[colonnes_a_conserver].copy()
    
    # Afficher les colonnes conserv√©es apr√®s filtrage strict
    st.write("Colonnes conserv√©es apr√®s filtrage strict:")
    st.write(df_epargne.columns.tolist())
    
    # Conversion des colonnes avec gestion des erreurs - Utilisation STRICTE des colonnes sp√©cifi√©es
    
    # 1. Conversion des dates (UNIQUEMENT "Date de souscription" et "Date de validation" comme sp√©cifi√©)
    st.subheader("Conversion des types de donn√©es")
    st.write("Conversion des dates - Utilisation stricte des colonnes sp√©cifi√©es")
    
    # IMPORTANT: Traitement STRICT des colonnes - Ne traiter que les colonnes r√©ellement pr√©sentes
    # 1. Conversion des dates - UNIQUEMENT si les colonnes existent r√©ellement
    
    # Traitement de "Date de souscription" - UNIQUEMENT si la colonne existe r√©ellement
    if "Date de souscription" in df_epargne.columns:
        st.write("Conversion de 'Date de souscription' en date...")
        # Convertir en datetime
        df_epargne["Date de souscription"] = safe_to_datetime(df_epargne["Date de souscription"])
        
        # Cr√©er une colonne pour l'affichage format√© en jj/mm/aaaa
        df_epargne["Date de souscription_affichage"] = df_epargne["Date de souscription"].dt.strftime("%d/%m/%Y")
        st.success("‚úÖ Format jj/mm/aaaa appliqu√© √† 'Date de souscription'")
        
        # Cr√©er la colonne Mois uniquement si Date de souscription existe et contient des dates valides
        if "Date de souscription" in df_epargne.columns and not df_epargne["Date de souscription"].isna().all():
            df_epargne["Mois"] = df_epargne["Date de souscription"].dt.to_period("M").astype(str)
            st.success("Colonne 'Mois' cr√©√©e avec succ√®s")
        else:
            st.warning("Impossible de cr√©er la colonne 'Mois' car 'Date de souscription' contient des valeurs invalides")
    else:
        st.warning("Colonne 'Date de souscription' absente - Impossible de cr√©er les dates de souscription")
    
    # Traitement de "Date de validation" - UNIQUEMENT si la colonne existe r√©ellement
    if "Date de validation" in df_epargne.columns:
        st.write("Conversion de 'Date de validation' en date...")
        # Convertir en datetime
        df_epargne["Date de validation"] = safe_to_datetime(df_epargne["Date de validation"])
        
        # Cr√©er une colonne pour l'affichage format√© en jj/mm/aaaa
        df_epargne["Date de validation_affichage"] = df_epargne["Date de validation"].dt.strftime("%d/%m/%Y")
        st.success("‚úÖ Format jj/mm/aaaa appliqu√© √† 'Date de validation'")
    else:
        st.warning("Colonne 'Date de validation' absente - Cette information ne sera pas disponible pour l'analyse")
    
    # 2. Conversion des montants - UNIQUEMENT si les colonnes existent r√©ellement
    st.write("Conversion des montants - Utilisation stricte des colonnes sp√©cifi√©es")
    
    # Traitement de "Montant" - UNIQUEMENT si la colonne existe r√©ellement
    if "Montant" in df_epargne.columns:
        st.write("Conversion de 'Montant' en nombre...")
        df_epargne["Montant"] = safe_to_numeric(df_epargne["Montant"])
        # Cr√©er la colonne d√©riv√©e n√©cessaire au fonctionnement
        df_epargne["Montant du placement"] = df_epargne["Montant"]
        st.success("Colonne 'Montant du placement' cr√©√©e avec succ√®s")
    else:
        st.warning("Colonne 'Montant' absente - Impossible de cr√©er les montants de placement")
    
    # Traitement de "Montant des frais" - UNIQUEMENT si la colonne existe r√©ellement
    if "Montant des frais" in df_epargne.columns:
        st.write("Conversion de 'Montant des frais' en nombre...")
        df_epargne["Montant des frais"] = safe_to_numeric(df_epargne["Montant des frais"])
        st.success("Colonne 'Montant des frais' convertie avec succ√®s")
    else:
        st.warning("Colonne 'Montant des frais' absente - Cette information ne sera pas disponible pour l'analyse")
    
    # IMPORTANT: FILTRAGE FINAL STRICT - Garantir qu'aucune colonne parasite n'est pr√©sente
    # Cr√©er un nouveau DataFrame FINAL qui ne contiendra QUE les colonnes strictes + d√©riv√©es n√©cessaires
    st.subheader("üîç FILTRAGE FINAL STRICT DES COLONNES")
    st.write("Cr√©ation d'un DataFrame final ne contenant strictement que les colonnes sp√©cifi√©es et leurs d√©riv√©es n√©cessaires.")
    
    # Cr√©er un DataFrame vide pour l'analyse finale
    df_final = pd.DataFrame(index=df_epargne.index)
    
    # 1. Copier UNIQUEMENT les colonnes strictes qui existent r√©ellement dans le fichier source
    colonnes_copiees = []
    for col in colonnes_strictes:
        if col in df_epargne.columns:
            df_final[col] = df_epargne[col]
            colonnes_copiees.append(col)
            st.success(f"‚úÖ Colonne stricte '{col}' copi√©e dans le DataFrame final")
    
    # 2. Ajouter UNIQUEMENT les colonnes d√©riv√©es n√©cessaires au fonctionnement
    colonnes_derivees = []
    
    # 2.1 Colonne "Date de souscription" d√©riv√©e de "Date de souscription"
    if 'Date de souscription' in df_final.columns:
        df_final['Date de souscription'] = df_final['Date de souscription']
        colonnes_derivees.append('Date de souscription')
        st.success("‚úÖ Colonne d√©riv√©e 'Date de souscription' ajout√©e au DataFrame final")
    
    # 2.2 Colonne "Montant du placement" d√©riv√©e de "Montant"
    if 'Montant' in df_final.columns:
        df_final['Montant du placement'] = df_final['Montant']
        colonnes_derivees.append('Montant du placement')
        st.success("‚úÖ Colonne d√©riv√©e 'Montant du placement' ajout√©e au DataFrame final")
    
    # 2.3 Colonne "Mois" d√©riv√©e de "Date de souscription"
    if 'Date de souscription' in df_final.columns and not df_final['Date de souscription'].isna().all():
        df_final['Mois'] = df_final['Date de souscription'].dt.to_period('M').astype(str)
        colonnes_derivees.append('Mois')
        st.success("‚úÖ Colonne d√©riv√©e 'Mois' ajout√©e au DataFrame final")
    
    # Remplacer df_epargne par df_final pour la suite de l'analyse
    df_epargne = df_final.copy()
    
    # Afficher les colonnes finales pour v√©rification
    st.subheader("Colonnes finales utilis√©es pour l'analyse")
    st.write(f"Colonnes strictes ({len(colonnes_copiees)}): {colonnes_copiees}")
    st.write(f"Colonnes d√©riv√©es ({len(colonnes_derivees)}): {colonnes_derivees}")
    st.write("Toutes les colonnes du DataFrame final:")
    st.write(df_epargne.columns.tolist())
    
    # V√©rification finale qu'aucune colonne parasite n'est pr√©sente
    colonnes_autorisees = colonnes_strictes + ['Date de souscription', 'Montant du placement', 'Mois']
    colonnes_parasites = [col for col in df_epargne.columns if col not in colonnes_autorisees]
    
    if colonnes_parasites:
        st.error(f"‚õî ATTENTION: Des colonnes parasites sont encore pr√©sentes: {colonnes_parasites}")
        # Supprimer les colonnes parasites
        df_epargne = df_epargne.drop(columns=colonnes_parasites)
        st.success(f"Les colonnes parasites ont √©t√© supprim√©es du DataFrame final")
        st.write("Colonnes finales apr√®s suppression des parasites:")
        st.write(df_epargne.columns.tolist())
    else:
        st.success("‚úÖ Aucune colonne parasite d√©tect√©e - Le DataFrame final est conforme aux sp√©cifications")
        
    # Afficher un aper√ßu du DataFrame final
    with st.expander("Aper√ßu du DataFrame final"):
        st.dataframe(df_epargne.head(10))
        
    # Afficher un aper√ßu des donn√©es converties
    with st.expander("Aper√ßu des donn√©es apr√®s conversion"):
        st.write("Exemples de valeurs dans les colonnes principales:")
        for col in ['Montant', 'Montant des frais', 'Date de souscription', 'Date de validation']:
            if col in df_epargne.columns:
                st.write(f"Colonne '{col}':")
                st.write(df_epargne[col].head())
        df_epargne['Montant du placement'] = 0  # Valeur par d√©faut en cas d'erreur
    
    # FILTRAGE FINAL ULTRA-STRICT: Garantir qu'aucune colonne parasite ne subsiste
    st.subheader("üîí FILTRAGE FINAL ULTRA-STRICT")
    st.write("V√©rification finale et suppression de toute colonne parasite potentielle.")
    
    # Cr√©er un DataFrame FINAL compl√®tement nouveau
    df_final_strict = pd.DataFrame(index=df_epargne.index)
    
    # V√©rifier si la colonne Conseiller existe exactement comme sp√©cifi√©e
    if 'Conseiller' not in df_epargne.columns:
        st.warning("La colonne 'Conseiller' n'est pas pr√©sente dans le fichier source")
        # Ajouter la colonne uniquement si elle est absente
        df_epargne['Conseiller'] = 'Inconnu'
    
    # Identifier les colonnes parasites pour information
    colonnes_parasites = [col for col in df_epargne.columns if col not in colonnes_autorisees]
    if colonnes_parasites:
        st.error(f"‚õî ATTENTION: Colonnes parasites d√©tect√©es avant filtrage final: {', '.join(colonnes_parasites)}")
        st.write("Ces colonnes seront supprim√©es d√©finitivement.")
    
    # Copier UNIQUEMENT les colonnes strictes qui existent dans le DataFrame source
    colonnes_strictes_copiees = []
    for col in colonnes_strictes:
        if col in df_epargne.columns:
            df_final_strict[col] = df_epargne[col]
            colonnes_strictes_copiees.append(col)
            st.success(f"‚úÖ Colonne stricte '{col}' copi√©e dans le DataFrame final")
    
    # Copier UNIQUEMENT les colonnes d√©riv√©es qui existent dans le DataFrame source
    colonnes_derivees_copiees = []
    for col in colonnes_derivees:
        if col in df_epargne.columns:
            df_final_strict[col] = df_epargne[col]
            colonnes_derivees_copiees.append(col)
            st.success(f"‚úÖ Colonne d√©riv√©e '{col}' copi√©e dans le DataFrame final")
    
    # Remplacer df_epargne par le DataFrame final ultra-strict
    df_epargne = df_final_strict.copy()
    
    # V√©rification finale qu'aucune colonne parasite n'est pr√©sente
    colonnes_finales = df_epargne.columns.tolist()
    colonnes_parasites_finales = [col for col in colonnes_finales if col not in colonnes_autorisees]
    
    if colonnes_parasites_finales:
        st.error(f"‚õî ERREUR CRITIQUE: Des colonnes parasites subsistent apr√®s filtrage ultra-strict: {colonnes_parasites_finales}")
        # Suppression d'urgence des colonnes parasites
        df_epargne = df_epargne.drop(columns=colonnes_parasites_finales)
        st.warning("Suppression d'urgence des colonnes parasites effectu√©e.")
    else:
        st.success("‚úÖ VALIDATION FINALE: Aucune colonne parasite d√©tect√©e. Le DataFrame est strictement conforme aux sp√©cifications.")
    
    # Afficher les colonnes finales pour v√©rification
    st.write("Colonnes finales utilis√©es pour l'analyse:")
    st.write(df_epargne.columns.tolist())
    
    # V√©rifier si la colonne Type d'investissement existe
    if 'Type d\'investissement' in df_epargne.columns:
        st.success("Colonne 'Type d\'investissement' d√©tect√©e avec succ√®s")
        # Afficher les types d'investissement uniques pour v√©rification
        types_investissement = df_epargne['Type d\'investissement'].dropna().unique()
        st.write("Types d'investissement d√©tect√©s:")
        st.write(types_investissement)
    
    # V√©rifier si la colonne Montant du placement existe
    if 'Montant du placement' in df_epargne.columns:
        # V√©rifier les montants √† 0
        zero_count = (df_epargne['Montant du placement'] == 0).sum()
        if zero_count > 0:
            st.warning(f"‚ö†Ô∏è {zero_count} souscriptions √âpargne avec un montant de 0‚Ç¨ d√©tect√©es.")
        
        # Filtrer les montants valides
        df_epargne_valid = df_epargne[df_epargne['Montant du placement'] > 0].copy()
        if df_epargne_valid.empty:
            st.warning("‚ö†Ô∏è Aucune souscription √âpargne avec un montant sup√©rieur √† 0.")
            # Utiliser toutes les donn√©es m√™me avec montants √† 0 plut√¥t que de retourner
            df_epargne_valid = df_epargne.copy()
            st.info("Utilisation de toutes les donn√©es disponibles malgr√© l'absence de montants valides.")
    else:
        # Si la colonne n'existe pas, utiliser toutes les donn√©es
        df_epargne_valid = df_epargne.copy()
        st.warning("‚ö†Ô∏è Colonne 'Montant du placement' non trouv√©e. Analyse limit√©e.")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        # Filtrer pour ne prendre en compte que les souscriptions avec √©tape "Act√©" ou "Valid√©"
        # V√©rifier si la colonne √âtape existe (avec diff√©rentes casses possibles)
        etape_col = next((col for col in df_epargne_valid.columns if col.lower() in ['√©tape', 'etape']), None)
        
        if etape_col:
            df_finalise = df_epargne_valid[df_epargne_valid[etape_col].str.lower().isin(['act√©', 'valid√©', 'acte', 'valide'])]
            total_collecte = df_finalise['Montant du placement'].sum()
            st.metric("üí∞ Collecte Totale √âpargne (Act√©/Valid√©)", f"{total_collecte:,.0f}‚Ç¨")
        else:
            total_collecte = df_epargne_valid['Montant du placement'].sum()
            st.metric("üí∞ Collecte Totale √âpargne", f"{total_collecte:,.0f}‚Ç¨")
    with col2:
        nb_souscriptions = len(df_epargne_valid)
        st.metric("üìù Nombre de Souscriptions", f"{nb_souscriptions:,}")
    with col3:
        ticket_moyen = df_epargne_valid['Montant du placement'].mean()
        st.metric("üéØ Ticket Moyen", f"{ticket_moyen:,.0f}‚Ç¨")
    with col4:
        nb_conseillers = df_epargne_valid['Conseiller'].nunique()
        st.metric("üë• Nombre de Conseillers", f"{nb_conseillers}")
    
    st.subheader("üîç Filtres")
    col1, col2 = st.columns(2)
    df_filtre = df_epargne_valid.copy()
    with col1:
        mois_disponibles = sorted(df_epargne_valid['Mois'].dropna().unique())
        mois_selectionne = st.selectbox("üìÖ Mois", options=["Tous"] + mois_disponibles, key="mois_epargne")
        if mois_selectionne != "Tous":
            df_filtre = df_filtre[df_filtre['Mois'] == mois_selectionne]
    with col2:
        conseillers_disponibles = sorted(df_epargne_valid['Conseiller'].dropna().unique())
        conseiller_selectionne = st.selectbox("üë§ Conseiller", options=["Tous"] + conseillers_disponibles, key="conseiller_epargne")
        if conseiller_selectionne != "Tous":
            df_filtre = df_filtre[df_filtre['Conseiller'] == conseiller_selectionne]
    
    if not df_filtre.empty:
        st.subheader("üìà √âvolution de la Collecte √âpargne (du 1er au dernier jour)")
        
        # Filtrer par √©tape "Act√©" et "Valid√©" si la colonne √âtape existe
        if '√âtape' in df_filtre.columns:
            try:
                # Filtrer pour ne garder que les √©tapes "Act√©" et "Valid√©" (insensible √† la casse)
                etapes_finalisees = ['act√©', 'valid√©', 'acte', 'valide']
                mask_etapes = df_filtre['√âtape'].astype(str).str.lower().isin(etapes_finalisees)
                df_filtre_finalise = df_filtre[mask_etapes].copy()
                
                # Informer l'utilisateur du filtrage effectu√©
                nb_total = len(df_filtre)
                nb_finalise = len(df_filtre_finalise)
                st.info(f"‚ÑπÔ∏è {nb_finalise} souscriptions sur {nb_total} ont une √©tape 'Act√©' ou 'Valid√©' et sont consid√©r√©es comme finalis√©es.")
                
                # Si aucune ligne ne correspond aux √©tapes finalis√©es, utiliser toutes les donn√©es
                if df_filtre_finalise.empty and not df_filtre.empty:
                    st.warning("‚ö†Ô∏è Aucune souscription avec √©tape 'Act√©' ou 'Valid√©' trouv√©e. Utilisation de toutes les donn√©es.")
                    df_filtre_finalise = df_filtre.copy()
            except Exception as e:
                st.error(f"Erreur lors du filtrage par √©tape: {e}")
                df_filtre_finalise = df_filtre.copy()
        else:
            # Si la colonne √âtape n'existe pas, utiliser toutes les donn√©es
            df_filtre_finalise = df_filtre.copy()
            st.info("‚ÑπÔ∏è Colonne '√âtape' non trouv√©e. Toutes les souscriptions sont consid√©r√©es pour l'analyse.")
        
        # Assurer la compatibilit√© des types avant d'afficher le DataFrame
        df_filtre_compatible = ensure_pyarrow_compatibility(df_filtre)
        
        # Afficher le DataFrame filtr√©
        st.subheader("üìã Donn√©es filtr√©es")
        st.dataframe(df_filtre_compatible)
        
        # Utiliser le DataFrame filtr√© pour la suite
        df_filtre = df_filtre_finalise
        
        # Ajuster les dates pour avoir une plage compl√®te du 1er au dernier jour du mois
        df_filtre = adjust_dates_to_month_range(df_filtre, 'Date de souscription')
        
        # Cr√©er une agr√©gation mensuelle avec les dates de d√©but et fin
        evolution_mensuelle = df_filtre.groupby('Mois').agg(
            Montant_Total=('Montant du placement', 'sum'),
            Premier_Jour=('Premier_Jour_Mois', 'first'),
            Dernier_Jour=('Dernier_Jour_Mois', 'first')
        ).reset_index()
        
        # Trier par date de d√©but
        evolution_mensuelle = evolution_mensuelle.sort_values('Premier_Jour')
        
        # S'assurer que les dates sont valides (pas de NaT)
        evolution_mensuelle['Premier_Jour'] = pd.to_datetime(evolution_mensuelle['Premier_Jour'], errors='coerce')
        evolution_mensuelle['Dernier_Jour'] = pd.to_datetime(evolution_mensuelle['Dernier_Jour'], errors='coerce')
        
        # Remplacer les dates NaT par les premiers et derniers jours du mois bas√©s sur la colonne 'Mois'
        for idx, row in evolution_mensuelle.iterrows():
            if pd.isna(row['Premier_Jour']) or pd.isna(row['Dernier_Jour']):
                try:
                    mois_annee = row['Mois']
                    annee, mois = mois_annee.split('-')
                    premier_jour = pd.Timestamp(year=int(annee), month=int(mois), day=1)
                    dernier_jour = pd.Timestamp(year=int(annee), month=int(mois), day=pd.Timestamp(premier_jour).days_in_month)
                    
                    if pd.isna(row['Premier_Jour']):
                        evolution_mensuelle.at[idx, 'Premier_Jour'] = premier_jour
                    if pd.isna(row['Dernier_Jour']):
                        evolution_mensuelle.at[idx, 'Dernier_Jour'] = dernier_jour
                except Exception:
                    # En cas d'erreur, laisser les valeurs NaT
                    pass
        
        # Cr√©er des √©tiquettes personnalis√©es pour l'axe X avec les plages de dates
        evolution_mensuelle['P√©riode'] = evolution_mensuelle.apply(
            lambda row: f"{row['Mois']} ({row['Premier_Jour'].strftime('%d/%m') if pd.notna(row['Premier_Jour']) else '01/01'} - {row['Dernier_Jour'].strftime('%d/%m') if pd.notna(row['Dernier_Jour']) else '31/12'})", 
            axis=1
        )
        
        # Calculer l'√©cart par rapport √† l'objectif
        evolution_mensuelle['√âcart Objectif'] = evolution_mensuelle['Montant_Total'] - OBJECTIF_MENSUEL_EPARGNE
        evolution_mensuelle['Statut'] = np.where(evolution_mensuelle['√âcart Objectif'] >= 0, '‚úÖ Atteint', '‚ùå Sous Objectif')
        
        # Cr√©er un DataFrame pour l'affichage et l'export
        display_df = pd.DataFrame({
            'Mois': evolution_mensuelle['Mois'],
            'P√©riode': evolution_mensuelle['P√©riode'],
            'Montant Total': evolution_mensuelle['Montant_Total'],
            '√âcart Objectif': evolution_mensuelle['√âcart Objectif'],
            'Statut': evolution_mensuelle['Statut']
        })
        
        # Cr√©er le graphique avec les p√©riodes compl√®tes
        fig_mensuel = px.bar(
            evolution_mensuelle,
            x='P√©riode',
            y='Montant_Total',
            title=f"üìä √âvolution Mensuelle de la Collecte √âpargne (Objectif: {OBJECTIF_MENSUEL_EPARGNE:,.0f}‚Ç¨)",
            text='Montant_Total',
            color='Statut',
            color_discrete_map={'‚úÖ Atteint': '#2E8B57', '‚ùå Sous Objectif': '#DC143C'}
        )
        fig_mensuel.update_traces(texttemplate='%{text:,.0f}‚Ç¨', textposition='outside')
        
        # Ajouter une ligne pour l'objectif
        fig_mensuel.add_shape(
            type="line",
            x0=0,
            x1=len(evolution_mensuelle['P√©riode'])-1,
            y0=OBJECTIF_MENSUEL_EPARGNE,
            y1=OBJECTIF_MENSUEL_EPARGNE,
            line=dict(color="black", width=2, dash="dash")
        )
        
        # Ajouter une annotation pour l'objectif
        fig_mensuel.add_annotation(
            x=len(evolution_mensuelle['P√©riode'])-1,
            y=OBJECTIF_MENSUEL_EPARGNE,
            text=f"Objectif: {OBJECTIF_MENSUEL_EPARGNE:,.0f}‚Ç¨",
            showarrow=False,
            yshift=10
        )
        
        st.plotly_chart(fig_mensuel, use_container_width=True)
        
        # Analyse des types de versements
        st.subheader("üí∏ Analyse par Type de Versement")
        
        # V√©rifier si la colonne Type de versement existe
        if 'Type de versement' in df_filtre.columns:
            # Agr√©gation par type de versement
            repartition_versement = df_filtre.groupby('Type de versement').agg(
                Montant_Total=('Montant du placement', 'sum'),
                Nombre_Souscriptions=('Date de souscription', 'count')
            ).reset_index()
            
            # Trier par montant total d√©croissant
            repartition_versement = repartition_versement.sort_values('Montant_Total', ascending=False)
            
            # Calculer les pourcentages
            total_montant = repartition_versement['Montant_Total'].sum()
            repartition_versement['Pourcentage'] = (repartition_versement['Montant_Total'] / total_montant * 100).round(1)
            
            # Formatage pour l'affichage
            repartition_versement_display = pd.DataFrame({
                'Type de versement': repartition_versement['Type de versement'],
                'Montant Total': repartition_versement['Montant_Total'].apply(lambda x: f"{x:,.0f}‚Ç¨"),
                'Nombre de Souscriptions': repartition_versement['Nombre_Souscriptions'],
                'Pourcentage': repartition_versement['Pourcentage'].apply(lambda x: f"{x:.1f}%")
            })
            
            # Afficher le tableau r√©capitulatif
            st.dataframe(repartition_versement_display, use_container_width=True)
            
            # Cr√©er un graphique en camembert pour la r√©partition par type de versement
            fig_versement = px.pie(
                repartition_versement,
                values='Montant_Total',
                names='Type de versement',
                title="R√©partition par Type de Versement",
                hover_data=['Pourcentage'],
                labels={'Pourcentage': 'Pourcentage'},
                hole=0.4
            )
            
            # Ajouter les pourcentages sur le graphique
            fig_versement.update_traces(textinfo='percent+label')
            
            st.plotly_chart(fig_versement, use_container_width=True)
            
            # Analyse crois√©e par type de versement et √©tape si les deux colonnes existent
            if '√âtape' in df_filtre.columns:
                st.subheader("üìÜ R√©partition des Types de Versement par √âtape")
                
                # Cr√©er un tableau crois√© dynamique
                pivot_etape_versement = pd.pivot_table(
                    df_filtre,
                    values='Montant du placement',
                    index=['Type de versement'],
                    columns=['√âtape'],
                    aggfunc='sum',
                    fill_value=0
                ).reset_index()
                
                # Formater les valeurs pour l'affichage
                for col in pivot_etape_versement.columns:
                    if col != 'Type de versement':
                        pivot_etape_versement[col] = pivot_etape_versement[col].apply(lambda x: f"{x:,.0f}‚Ç¨")
                
                st.dataframe(pivot_etape_versement, use_container_width=True)
                
                # Cr√©er un graphique √† barres group√©es pour montrer la r√©partition
                # Pr√©parer les donn√©es pour le graphique
                df_graph = df_filtre.groupby(['Type de versement', '√âtape'])['Montant du placement'].sum().reset_index()
                
                fig_etape_versement = px.bar(
                    df_graph,
                    x='Type de versement',
                    y='Montant du placement',
                    color='√âtape',
                    title="Montant par Type de Versement et √âtape",
                    barmode='group',
                    text_auto='.0f'
                )
                
                fig_etape_versement.update_traces(texttemplate='%{text}‚Ç¨', textposition='outside')
                fig_etape_versement.update_layout(height=500, yaxis_title="Montant (‚Ç¨)")
                
                st.plotly_chart(fig_etape_versement, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è La colonne 'Type de versement' n'a pas √©t√© trouv√©e dans les donn√©es.")
        
        # Analyse des types d'investissement
        st.subheader("üí∞ Analyse par Type d'Investissement")
        
        # V√©rifier si la colonne Type d'investissement existe
        if 'Type d\'investissement' in df_filtre.columns:
            # Agr√©gation par type d'investissement
            repartition_invest = df_filtre.groupby('Type d\'investissement').agg(
                Montant_Total=('Montant du placement', 'sum'),
                Nombre_Souscriptions=('Date de souscription', 'count')
            ).reset_index()
            
            # Trier par montant total d√©croissant
            repartition_invest = repartition_invest.sort_values('Montant_Total', ascending=False)
            
            # Calculer les pourcentages
            total_montant = repartition_invest['Montant_Total'].sum()
            repartition_invest['Pourcentage'] = (repartition_invest['Montant_Total'] / total_montant * 100).round(1)
            
            # Formatage pour l'affichage
            repartition_invest_display = pd.DataFrame({
                'Type d\'investissement': repartition_invest['Type d\'investissement'],
                'Montant Total': repartition_invest['Montant_Total'].apply(lambda x: f"{x:,.0f}‚Ç¨"),
                'Nombre de Souscriptions': repartition_invest['Nombre_Souscriptions'],
                'Pourcentage': repartition_invest['Pourcentage'].apply(lambda x: f"{x:.1f}%")
            })
            
            # Afficher le tableau r√©capitulatif
            st.dataframe(repartition_invest_display, use_container_width=True)
            
            # Cr√©er un graphique en camembert pour la r√©partition par type d'investissement
            fig_invest = px.pie(
                repartition_invest,
                values='Montant_Total',
                names='Type d\'investissement',
                title="R√©partition par Type d'Investissement",
                hover_data=['Pourcentage'],
                labels={'Pourcentage': 'Pourcentage'},
                hole=0.4
            )
            
            # Ajouter les pourcentages sur le graphique
            fig_invest.update_traces(textinfo='percent+label')
            
            st.plotly_chart(fig_invest, use_container_width=True)
            
            # Analyse crois√©e par type d'investissement et √©tape si les deux colonnes existent
            if '√âtape' in df_filtre.columns:
                st.subheader("üí≥ R√©partition des Types d'Investissement par √âtape")
                
                # Cr√©er un tableau crois√© dynamique
                pivot_etape_invest = pd.pivot_table(
                    df_filtre,
                    values='Montant du placement',
                    index=['Type d\'investissement'],
                    columns=['√âtape'],
                    aggfunc='sum',
                    fill_value=0
                ).reset_index()
                
                # Formater les valeurs pour l'affichage
                for col in pivot_etape_invest.columns:
                    if col != 'Type d\'investissement':
                        pivot_etape_invest[col] = pivot_etape_invest[col].apply(lambda x: f"{x:,.0f}‚Ç¨")
                
                st.dataframe(pivot_etape_invest, use_container_width=True)
                
                # Cr√©er un graphique √† barres group√©es pour montrer la r√©partition
                # Pr√©parer les donn√©es pour le graphique
                df_graph = df_filtre.groupby(['Type d\'investissement', '√âtape'])['Montant du placement'].sum().reset_index()
                
                fig_etape_invest = px.bar(
                    df_graph,
                    x='Type d\'investissement',
                    y='Montant du placement',
                    color='√âtape',
                    title="Montant par Type d'Investissement et √âtape",
                    barmode='group',
                    text_auto='.0f'
                )
                
                fig_etape_invest.update_traces(texttemplate='%{text}‚Ç¨', textposition='outside')
                fig_etape_invest.update_layout(height=500, yaxis_title="Montant (‚Ç¨)")
                
                st.plotly_chart(fig_etape_invest, use_container_width=True)
                
                # Analyse crois√©e par type d'investissement et type de versement si les deux colonnes existent
                if 'Type de versement' in df_filtre.columns:
                    st.subheader("üí± Types d'Investissement par Type de Versement")
                    
                    # Cr√©er un tableau crois√© dynamique
                    pivot_versement_invest = pd.pivot_table(
                        df_filtre,
                        values='Montant du placement',
                        index=['Type d\'investissement'],
                        columns=['Type de versement'],
                        aggfunc='sum',
                        fill_value=0
                    ).reset_index()
                    
                    # Formater les valeurs pour l'affichage
                    for col in pivot_versement_invest.columns:
                        if col != 'Type d\'investissement':
                            pivot_versement_invest[col] = pivot_versement_invest[col].apply(lambda x: f"{x:,.0f}‚Ç¨")
                    
                    st.dataframe(pivot_versement_invest, use_container_width=True)
                    
                    # Cr√©er un graphique √† barres group√©es pour montrer la r√©partition
                    # Pr√©parer les donn√©es pour le graphique
                    df_graph = df_filtre.groupby(['Type d\'investissement', 'Type de versement'])['Montant du placement'].sum().reset_index()
                    
                    fig_versement_invest = px.bar(
                        df_graph,
                        x='Type d\'investissement',
                        y='Montant du placement',
                        color='Type de versement',
                        title="Montant par Type d'Investissement et Type de Versement",
                        barmode='group',
                        text_auto='.0f'
                    )
                    
                    fig_versement_invest.update_traces(texttemplate='%{text}‚Ç¨', textposition='outside')
                    fig_versement_invest.update_layout(height=500, yaxis_title="Montant (‚Ç¨)")
                    
                    st.plotly_chart(fig_versement_invest, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è La colonne 'Type d\'investissement' n'a pas √©t√© trouv√©e dans les donn√©es.")
        
        # Tableau r√©capitulatif
        st.subheader("üìã R√©capitulatif Mensuel")
        
        # La section Pipe de Collecte √âpargne a √©t√© d√©plac√©e dans un sous-onglet d√©di√©
        # Voir la fonction analyser_pipe_collecte_epargne()
        
        # Formatage pour l'affichage
        display_df['Montant Total'] = display_df['Montant Total'].apply(lambda x: f"{x:,.0f}‚Ç¨")
        display_df['√âcart Objectif'] = display_df['√âcart Objectif'].apply(lambda x: f"{x:,.0f}‚Ç¨")
        
        st.dataframe(display_df, use_container_width=True)
        
        # Analyse par √©tape
        st.subheader("üìä Analyse par √âtape")
        
        # V√©rifier si la colonne √âtape existe
        if '√âtape' in df_filtre.columns:
            # Afficher les √©tapes disponibles
            etapes_disponibles = sorted(df_filtre['√âtape'].unique())
            st.info(f"‚ÑπÔ∏è √âtapes disponibles dans les donn√©es: {', '.join(etapes_disponibles)}")
            
            # V√©rifier la pr√©sence d'√©tapes importantes
            etapes_importantes = ['Mandat√©', 'Soumis partenaires', 'Act√©', 'Valid√©']
            etapes_presentes = [etape for etape in etapes_importantes if etape in etapes_disponibles or etape.lower() in [e.lower() for e in etapes_disponibles]]
            etapes_manquantes = [etape for etape in etapes_importantes if etape not in etapes_presentes and etape.lower() not in [e.lower() for e in etapes_disponibles]]
            
            if etapes_presentes:
                st.success(f"‚úÖ √âtapes importantes d√©tect√©es: {', '.join(etapes_presentes)}")
            if etapes_manquantes:
                st.warning(f"‚ö†Ô∏è Certaines √©tapes importantes n'ont pas √©t√© trouv√©es dans les donn√©es: {', '.join(etapes_manquantes)}. V√©rifiez l'orthographe ou les variations dans vos donn√©es.")
            
            # Ajouter un filtre par √©tape
            etapes_a_afficher = st.multiselect(
                "S√©lectionner les √©tapes √† afficher",
                options=etapes_disponibles,
                default=etapes_disponibles,
                key="etapes_filter_epargne"
            )
            
            if not etapes_a_afficher:
                st.warning("‚ö†Ô∏è Veuillez s√©lectionner au moins une √©tape pour l'analyse.")
                return
                
            # Filtrer les donn√©es selon les √©tapes s√©lectionn√©es
            df_filtre_etape = df_filtre[df_filtre['√âtape'].isin(etapes_a_afficher)].copy()
            
            # Analyse des souscriptions par √©tape
            analyse_etape = df_filtre_etape.groupby(['Mois', '√âtape']).agg(
                Nb_Souscriptions=('Montant du placement', 'count'),
                Montant_Total=('Montant du placement', 'sum')
            ).reset_index()
            
            # Trier par mois et montant total
            analyse_etape = analyse_etape.sort_values(['Mois', 'Montant_Total'], ascending=[True, False])
            
            # Cr√©er un graphique pour le nombre de souscriptions par √©tape et par mois
            fig_nb_etape = px.bar(
                analyse_etape,
                x='Mois',
                y='Nb_Souscriptions',
                color='√âtape',
                title="Nombre de Souscriptions par √âtape et par Mois",
                labels={
                    'Mois': 'Mois',
                    'Nb_Souscriptions': 'Nombre de Souscriptions',
                    '√âtape': '√âtape'
                },
                barmode='stack'
            )
            
            # Am√©liorer l'apparence du graphique
            fig_nb_etape.update_layout(
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                )
            )
            
            st.plotly_chart(fig_nb_etape, use_container_width=True)
            
            # Cr√©er un graphique pour le montant total par √©tape et par mois
            fig_montant_etape = px.bar(
                analyse_etape,
                x='Mois',
                y='Montant_Total',
                color='√âtape',
                title="Montant Total par √âtape et par Mois",
                labels={
                    'Mois': 'Mois',
                    'Montant_Total': 'Montant Total (‚Ç¨)',
                    '√âtape': '√âtape'
                },
                barmode='stack',
                text_auto='.2s'
            )
            
            # Formater les √©tiquettes de texte pour afficher les montants en euros
            fig_montant_etape.update_traces(texttemplate='%{text:,.0f}‚Ç¨', textposition='inside')
            
            # Am√©liorer l'apparence du graphique
            fig_montant_etape.update_layout(
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                )
            )
            
            st.plotly_chart(fig_montant_etape, use_container_width=True)
            
            # Tableau r√©capitulatif par √©tape
            st.subheader("üìã Tableau R√©capitulatif par √âtape")
            
            # Cr√©er un tableau r√©capitulatif par √©tape
            recap_etape = df_filtre_etape.groupby('√âtape').agg(
                Nb_Souscriptions=('Montant du placement', 'count'),
                Montant_Total=('Montant du placement', 'sum'),
                Ticket_Moyen=('Montant du placement', 'mean')
            ).reset_index()
            
            # Trier par montant total
            recap_etape = recap_etape.sort_values('Montant_Total', ascending=False)
            
            # Formater les colonnes num√©riques
            recap_etape['Montant_Total'] = recap_etape['Montant_Total'].apply(lambda x: f"{x:,.0f}‚Ç¨")
            recap_etape['Ticket_Moyen'] = recap_etape['Ticket_Moyen'].apply(lambda x: f"{x:,.0f}‚Ç¨")
            
            # Renommer les colonnes pour l'affichage
            recap_etape.columns = ['√âtape', 'Nombre de Souscriptions', 'Montant Total', 'Ticket Moyen']
            
            st.dataframe(recap_etape, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è La colonne '√âtape' n'a pas √©t√© trouv√©e dans les donn√©es. Impossible de r√©aliser l'analyse par √©tape.")
        
        # Analyse par conseiller
        st.subheader("üë• Analyse par Conseiller")
        
        # Calculer les statistiques par conseiller
        analyse_conseiller = df_filtre.groupby('Conseiller').agg(
            Nb_Souscriptions=('Montant du placement', 'count'),
            Montant_Total=('Montant du placement', 'sum'),
            Ticket_Moyen=('Montant du placement', 'mean')
        ).reset_index()
        
        # Trier par montant total
        analyse_conseiller = analyse_conseiller.sort_values('Montant_Total', ascending=False)
        
        # Graphiques par conseiller
        col1, col2 = st.columns(2)
        
        with col1:
            # Top 10 conseillers par montant
            fig_top_montant = px.bar(
                analyse_conseiller.head(10),
                x='Montant_Total',
                y='Conseiller',
                orientation='h',
                title="üèÜ Top 10 Conseillers - Collecte √âpargne",
                text='Montant_Total',
                color='Montant_Total',
                color_continuous_scale='Blues'
            )
            fig_top_montant.update_traces(texttemplate='%{text:,.0f}‚Ç¨', textposition='outside')
            st.plotly_chart(fig_top_montant, use_container_width=True)
        
        with col2:
            # Top 10 conseillers par ticket moyen
            top_ticket = analyse_conseiller[analyse_conseiller['Nb_Souscriptions'] >= 3].sort_values('Ticket_Moyen', ascending=False).head(10)
            fig_top_ticket = px.bar(
                top_ticket,
                x='Ticket_Moyen',
                y='Conseiller',
                orientation='h',
                title="üéØ Top 10 Conseillers - Ticket Moyen (min 3 souscriptions)",
                text='Ticket_Moyen',
                color='Ticket_Moyen',
                color_continuous_scale='Greens'
            )
            fig_top_ticket.update_traces(texttemplate='%{text:,.0f}‚Ç¨', textposition='outside')
            st.plotly_chart(fig_top_ticket, use_container_width=True)
        
        # Tableau d√©taill√© par conseiller
        st.subheader("üìä Tableau D√©taill√© par Conseiller")
        
        # Formatage pour l'affichage
        analyse_display = analyse_conseiller.copy()
        analyse_display['Montant_Total'] = analyse_display['Montant_Total'].apply(lambda x: f"{x:,.0f}‚Ç¨")
        analyse_display['Ticket_Moyen'] = analyse_display['Ticket_Moyen'].apply(lambda x: f"{x:,.0f}‚Ç¨")
        
        # Renommer les colonnes pour l'affichage
        analyse_display.columns = ['Conseiller', 'Nombre de Souscriptions', 'Montant Total', 'Ticket Moyen']
        
        st.dataframe(analyse_display, use_container_width=True)
        
        # T√©l√©chargement des donn√©es
        csv = analyse_display.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üì• T√©l√©charger les donn√©es (CSV)",
            data=csv,
            file_name=f"analyse_souscriptions_epargne_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv"
        )
        
        # Cr√©er un DataFrame pour le t√©l√©chargement
        df_download = df_filtre.copy()
        
        # Assurer la compatibilit√© des types avant le t√©l√©chargement
        df_download = ensure_pyarrow_compatibility(df_download)
        
        # Ajouter un bouton de t√©l√©chargement
        st.download_button(
            label="üì• T√©l√©charger les donn√©es filtr√©es",
            data=df_download.to_csv(index=False).encode('utf-8'),
            file_name='souscriptions_epargne_filtrees.csv',
            mime='text/csv',
        )
        
        # Analyse d√©taill√©e par produit d'√©pargne
        st.subheader("üí∞ Analyse D√©taill√©e par Produit d'√âpargne")
        
        # Cr√©er des onglets pour l'analyse par produit
        tabs_produit = st.tabs(["Vue Globale", "Analyse par Produit", "Performance par Conseiller", "Analyse par Groupe"])
        
        with tabs_produit[0]:
            # V√©rifier si la colonne Produit existe
            if 'Produit' in df_filtre.columns:
                # Analyse de la r√©partition par produit
                repartition_produit = df_filtre.groupby('Produit').agg(
                    Collecte=('Montant du placement', 'sum'),
                    Nombre=('Montant du placement', 'count'),
                    Ticket_Moyen=('Montant du placement', 'mean')
                ).reset_index()
                
                # Ajouter le pourcentage de la collecte totale
                total_collecte = repartition_produit['Collecte'].sum()
                repartition_produit['Pourcentage'] = (repartition_produit['Collecte'] / total_collecte * 100).round(1)
                
                # Trier par collecte d√©croissante
                repartition_produit = repartition_produit.sort_values('Collecte', ascending=False)
                
                # Afficher les m√©triques par produit
                col1, col2 = st.columns(2)
                
                with col1:
                    # Graphique en camembert pour la r√©partition de la collecte
                    fig_pie = px.pie(
                        repartition_produit,
                        values='Collecte',
                        names='Produit',
                        title="R√©partition de la Collecte par Produit",
                        hover_data=['Nombre', 'Ticket_Moyen', 'Pourcentage'],
                        labels={'Collecte': 'Montant collect√© (‚Ç¨)', 'Nombre': 'Nombre de souscriptions', 'Ticket_Moyen': 'Ticket moyen (‚Ç¨)', 'Pourcentage': 'Part du total (%)'},
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    fig_pie.update_traces(textinfo='percent+label+value', texttemplate='%{label}<br>%{value:,.0f}‚Ç¨<br>%{percent}')
                    st.plotly_chart(fig_pie, use_container_width=True)
                
                with col2:
                    # Graphique en barres pour le nombre de souscriptions par produit
                    fig_bar = px.bar(
                        repartition_produit,
                        x='Produit',
                        y='Nombre',
                        title="Nombre de Souscriptions par Produit",
                        text='Nombre',
                        color='Produit',
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    fig_bar.update_traces(textposition='outside')
                    st.plotly_chart(fig_bar, use_container_width=True)
                
                # Tableau r√©capitulatif
                repartition_display = repartition_produit.copy()
                repartition_display['Collecte'] = repartition_display['Collecte'].apply(lambda x: f"{x:,.0f}‚Ç¨")
                repartition_display['Ticket_Moyen'] = repartition_display['Ticket_Moyen'].apply(lambda x: f"{x:,.0f}‚Ç¨")
                repartition_display['Pourcentage'] = repartition_display['Pourcentage'].apply(lambda x: f"{x:.1f}%")
                repartition_display.columns = ['Produit', 'Collecte', 'Nombre de Souscriptions', 'Ticket Moyen', 'Part du Total']
                
                st.dataframe(repartition_display, use_container_width=True)
                
                # Export des donn√©es
                csv = repartition_display.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• T√©l√©charger les donn√©es par produit (CSV)",
                    data=csv,
                    file_name=f"repartition_produits_epargne_{datetime.now().strftime('%Y%m%d')}.csv",
                    mime="text/csv",
                    key="download_produit"
                )
            else:
                st.info("‚ÑπÔ∏è La colonne 'Produit' n'est pas pr√©sente dans les donn√©es. L'analyse par produit n'est pas disponible.")
                # Afficher une analyse simplifi√©e
                st.write("#### R√©sum√© de la collecte √©pargne")
                st.metric("üí∞ Collecte Totale", f"{df_filtre['Montant du placement'].sum():,.0f}‚Ç¨")
        
        with tabs_produit[1]:
            # Analyse de l'√©volution mensuelle par produit
            if 'Produit' in df_filtre.columns and 'Mois' in df_filtre.columns:
                # Cr√©er un s√©lecteur de produit
                produits_disponibles = sorted(df_filtre['Produit'].unique())
                produit_selectionne = st.selectbox("S√©lectionner un produit", options=produits_disponibles, key="select_produit_epargne")
                
                # Filtrer les donn√©es pour le produit s√©lectionn√©
                df_produit = df_filtre[df_filtre['Produit'] == produit_selectionne].copy()
                
                if not df_produit.empty:
                    # Afficher les m√©triques cl√©s pour le produit s√©lectionn√©
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        collecte_produit = df_produit['Montant du placement'].sum()
                        st.metric(f"Collecte Totale - {produit_selectionne}", f"{collecte_produit:,.0f}‚Ç¨")
                    with col2:
                        nb_souscriptions = len(df_produit)
                        st.metric("Nombre de Souscriptions", f"{nb_souscriptions:,}")
                    with col3:
                        ticket_moyen = df_produit['Montant du placement'].mean()
                        st.metric("Ticket Moyen", f"{ticket_moyen:,.0f}‚Ç¨")
                    
                    # √âvolution mensuelle du produit
                    evolution_produit = df_produit.groupby('Mois').agg(
                        Collecte=('Montant du placement', 'sum'),
                        Nombre=('Montant du placement', 'count')
                    ).reset_index()
                    
                    # Trier par mois
                    evolution_produit = evolution_produit.sort_values('Mois')
                    
                    # Graphique d'√©volution mensuelle
                    fig_evolution = px.line(
                        evolution_produit,
                        x='Mois',
                        y='Collecte',
                        title=f"√âvolution Mensuelle de la Collecte - {produit_selectionne}",
                        markers=True,
                        line_shape='linear'
                    )
                    fig_evolution.update_traces(line=dict(width=3), marker=dict(size=10))
                    fig_evolution.update_layout(yaxis_title="Collecte (‚Ç¨)")
                    st.plotly_chart(fig_evolution, use_container_width=True)
                    
                    # Graphique du nombre de souscriptions
                    fig_nombre = px.bar(
                        evolution_produit,
                        x='Mois',
                        y='Nombre',
                        title=f"Nombre de Souscriptions Mensuelles - {produit_selectionne}",
                        text='Nombre'
                    )
                    fig_nombre.update_traces(textposition='outside')
                    st.plotly_chart(fig_nombre, use_container_width=True)
                    
                    # R√©partition par conseiller pour ce produit
                    if 'Conseiller' in df_produit.columns:
                        st.subheader(f"Top Conseillers - {produit_selectionne}")
                        perf_conseillers = df_produit.groupby('Conseiller').agg(
                            Collecte=('Montant du placement', 'sum'),
                            Nombre=('Montant du placement', 'count'),
                            Ticket_Moyen=('Montant du placement', 'mean')
                        ).reset_index()
                        
                        perf_conseillers = perf_conseillers.sort_values('Collecte', ascending=False)
                        
                        fig_conseillers = px.bar(
                            perf_conseillers.head(10),
                            x='Collecte',
                            y='Conseiller',
                            orientation='h',
                            title=f"Top 10 Conseillers - {produit_selectionne}",
                            text='Collecte',
                            color='Collecte',
                            color_continuous_scale='Blues'
                        )
                        fig_conseillers.update_traces(texttemplate='%{text:,.0f}‚Ç¨', textposition='outside')
                        st.plotly_chart(fig_conseillers, use_container_width=True)
                else:
                    st.warning(f"‚ö†Ô∏è Aucune donn√©e trouv√©e pour le produit {produit_selectionne}.")
            else:
                if 'Produit' not in df_filtre.columns:
                    st.info("‚ÑπÔ∏è La colonne 'Produit' n'est pas pr√©sente dans les donn√©es. L'analyse par produit n'est pas disponible.")
                elif 'Mois' not in df_filtre.columns:
                    st.error("‚ùå Colonne 'Mois' non trouv√©e dans les donn√©es.")
        
        with tabs_produit[2]:
            # Analyse de la performance par conseiller avec les fonctions adapt√©es
            analyse_collecte_produit_conseiller_fallback(df_filtre, "√âpargne")
            analyse_performance_conseiller_fallback(df_filtre, 'Montant du placement', 'Conseiller', 'Performance √âpargne')
        
        with tabs_produit[3]:
            # Analyse par groupe de conseiller
            st.subheader("üë• Analyse par Groupe de Conseillers")
            
            # D√©finir les groupes de conseillers
            idr_conseillers = ['Ikramah BADATE', 'Yassila LAMBATE']
            internes_conseillers = ['Aicha NAILI', 'Abdelkarim BOUTERA', 'Yanis Sebiane', 'Nissrine BEJAOUI']
            
            # Cr√©er une colonne pour le groupe
            df_groupe = df_filtre.copy()
            
            # Attribuer les groupes
            def attribuer_groupe(conseiller):
                if conseiller in idr_conseillers:
                    return 'IDR'
                elif conseiller in internes_conseillers:
                    return 'Internes'
                else:
                    return 'Mandataires'
            
            df_groupe['Groupe'] = df_groupe['Conseiller'].apply(attribuer_groupe)
            
            # Calculer les statistiques par groupe
            stats_groupe = df_groupe.groupby('Groupe').agg(
                Collecte=('Montant du placement', 'sum'),
                Nombre=('Montant du placement', 'count'),
                Ticket_Moyen=('Montant du placement', 'mean'),
                Conseillers=('Conseiller', 'nunique')
            ).reset_index()
            
            # Calculer le pourcentage de la collecte totale
            total_collecte_groupe = stats_groupe['Collecte'].sum()
            stats_groupe['Pourcentage'] = (stats_groupe['Collecte'] / total_collecte_groupe * 100).round(1)
            
            # Afficher les m√©triques par groupe
            col1, col2 = st.columns(2)
            
            with col1:
                # Graphique en camembert pour la r√©partition de la collecte par groupe
                fig_pie_groupe = px.pie(
                    stats_groupe,
                    values='Collecte',
                    names='Groupe',
                    title="R√©partition de la Collecte par Groupe",
                    hover_data=['Nombre', 'Ticket_Moyen', 'Pourcentage', 'Conseillers'],
                    labels={
                        'Collecte': 'Montant collect√© (‚Ç¨)', 
                        'Nombre': 'Nombre de souscriptions', 
                        'Ticket_Moyen': 'Ticket moyen (‚Ç¨)', 
                        'Pourcentage': 'Part du total (%)',
                        'Conseillers': 'Nombre de conseillers'
                    },
                    color_discrete_sequence=px.colors.qualitative.Set2
                )
                fig_pie_groupe.update_traces(textinfo='percent+label+value', texttemplate='%{label}<br>%{value:,.0f}‚Ç¨<br>%{percent}')
                st.plotly_chart(fig_pie_groupe, use_container_width=True)
            
            with col2:
                # Graphique en barres pour le nombre de souscriptions par groupe
                fig_bar_groupe = px.bar(
                    stats_groupe,
                    x='Groupe',
                    y='Nombre',
                    title="Nombre de Souscriptions par Groupe",
                    text='Nombre',
                    color='Groupe',
                    color_discrete_sequence=px.colors.qualitative.Set2
                )
                fig_bar_groupe.update_traces(textposition='outside')
                st.plotly_chart(fig_bar_groupe, use_container_width=True)
            
            # Tableau r√©capitulatif par groupe
            st.subheader("üìã Tableau R√©capitulatif par Groupe")
            
            # Formatage pour l'affichage
            stats_groupe_display = stats_groupe.copy()
            stats_groupe_display['Collecte'] = stats_groupe_display['Collecte'].apply(lambda x: f"{x:,.0f}‚Ç¨")
            stats_groupe_display['Ticket_Moyen'] = stats_groupe_display['Ticket_Moyen'].apply(lambda x: f"{x:,.0f}‚Ç¨")
            stats_groupe_display['Pourcentage'] = stats_groupe_display['Pourcentage'].apply(lambda x: f"{x:.1f}%")
            stats_groupe_display.columns = ['Groupe', 'Collecte', 'Nombre de Souscriptions', 'Ticket Moyen', 'Nombre de Conseillers', 'Part du Total']
            
            st.dataframe(stats_groupe_display, use_container_width=True)
            
            # D√©tail par conseiller dans chaque groupe
            st.subheader("üîç D√©tail par Conseiller dans chaque Groupe")
            
            # Cr√©er un s√©lecteur de groupe
            groupes_disponibles = sorted(df_groupe['Groupe'].unique())
            groupe_selectionne = st.selectbox("S√©lectionner un groupe", options=groupes_disponibles, key="select_groupe_epargne")
            
            # Filtrer les donn√©es pour le groupe s√©lectionn√©
            df_groupe_filtre = df_groupe[df_groupe['Groupe'] == groupe_selectionne].copy()
            
            # Calculer les statistiques par conseiller dans le groupe s√©lectionn√©
            stats_conseiller_groupe = df_groupe_filtre.groupby('Conseiller').agg(
                Collecte=('Montant du placement', 'sum'),
                Nombre=('Montant du placement', 'count'),
                Ticket_Moyen=('Montant du placement', 'mean')
            ).reset_index()
            
            # Trier par collecte d√©croissante
            stats_conseiller_groupe = stats_conseiller_groupe.sort_values('Collecte', ascending=False)
            
            # Graphique des conseillers du groupe
            fig_conseillers_groupe = px.bar(
                stats_conseiller_groupe,
                x='Collecte',
                y='Conseiller',
                orientation='h',
                title=f"Conseillers du groupe {groupe_selectionne}",
                text='Collecte',
                color='Collecte',
                color_continuous_scale='Viridis'
            )
            fig_conseillers_groupe.update_traces(texttemplate='%{text:,.0f}‚Ç¨', textposition='outside')
            st.plotly_chart(fig_conseillers_groupe, use_container_width=True)
            
            # Tableau d√©taill√© par conseiller du groupe
            stats_conseiller_display = stats_conseiller_groupe.copy()
            stats_conseiller_display['Collecte'] = stats_conseiller_display['Collecte'].apply(lambda x: f"{x:,.0f}‚Ç¨")
            stats_conseiller_display['Ticket_Moyen'] = stats_conseiller_display['Ticket_Moyen'].apply(lambda x: f"{x:,.0f}‚Ç¨")
            stats_conseiller_display.columns = ['Conseiller', 'Collecte', 'Nombre de Souscriptions', 'Ticket Moyen']
            
            st.dataframe(stats_conseiller_display, use_container_width=True)
            
            # T√©l√©chargement des donn√©es par groupe
            csv_groupe = stats_groupe_display.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üìÖ T√©l√©charger les donn√©es par groupe (CSV)",
                data=csv_groupe,
                file_name=f"analyse_groupes_epargne_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv",
                key="download_groupe"
            )


def analyser_pipe_collecte_epargne(df_original):
    """
    Analyse d√©di√©e du Pipe de Collecte √âpargne.
    
    Cette fonction analyse sp√©cifiquement les souscriptions en cours de traitement
    (hors √©tapes finalis√©es comme "Act√©" et "Valid√©").
    
    Args:
        df_original: DataFrame contenant les donn√©es brutes
    """
    st.header("üîÑ Pipe de Collecte √âpargne")
    
    # V√©rification des donn√©es
    if df_original is None or df_original.empty:
        st.error("‚ùå Aucune donn√©e disponible pour l'analyse du pipe de collecte.")
        return
    
    # Appliquer extract_conseiller pour standardiser la colonne Conseiller
    df_with_conseiller = extract_conseiller(df_original)
    
    # V√©rifier si la colonne Conseiller a √©t√© correctement extraite
    if 'Conseiller' not in df_with_conseiller.columns:
        st.error("‚ùå Impossible d'extraire la colonne 'Conseiller'.")
        return
    
    # Utiliser le DataFrame avec la colonne Conseiller standardis√©e
    df_epargne_valid = df_with_conseiller.copy()
    
    # V√©rifier la pr√©sence des colonnes essentielles
    colonnes_essentielles = ['Date de souscription', 'Montant']
    colonnes_manquantes = [col for col in colonnes_essentielles if col not in df_epargne_valid.columns]
    
    if colonnes_manquantes:
        st.error(f"‚ùå Colonnes essentielles manquantes: {colonnes_manquantes}")
        return
    
    # Traitement des donn√©es de base
    # Convertir les dates
    df_epargne_valid['Date de souscription'] = safe_to_datetime(df_epargne_valid['Date de souscription'])
    
    # Cr√©er la colonne Montant du placement
    if 'Montant des frais' in df_epargne_valid.columns:
        df_epargne_valid['Montant des frais'] = safe_to_numeric(df_epargne_valid['Montant des frais'])
        df_epargne_valid['Montant du placement'] = safe_to_numeric(df_epargne_valid['Montant']) - df_epargne_valid['Montant des frais']
    else:
        df_epargne_valid['Montant du placement'] = safe_to_numeric(df_epargne_valid['Montant'])
    
    # Filtrer les donn√©es valides
    df_epargne_valid = df_epargne_valid.dropna(subset=['Date de souscription', 'Montant du placement'])
    
    if df_epargne_valid.empty:
        st.error("‚ùå Aucune donn√©e valide apr√®s traitement.")
        return
    
    # Cr√©er la colonne Mois pour l'agr√©gation
    df_epargne_valid['Mois'] = df_epargne_valid['Date de souscription'].dt.to_period('M').astype(str)
    
    # Ajouter les colonnes de premier et dernier jour du mois
    df_epargne_valid = adjust_dates_to_month_range(df_epargne_valid, 'Date de souscription')
    
    # Ajout du bloc pour l'√©volution du Pipe √âpargne en cours
    st.subheader("üìä √âvolution du Pipe √âpargne en cours")
    
    # V√©rifier si la colonne √âtape existe
    if '√âtape' in df_epargne_valid.columns:
        # Filtrer pour exclure les √©tapes "Act√©" et "Valid√©" (insensible √† la casse)
        etapes_finalisees = ['act√©', 'valid√©', 'acte', 'valide']
        mask_etapes_en_cours = ~df_epargne_valid['√âtape'].str.lower().isin(etapes_finalisees)
        df_pipe_en_cours = df_epargne_valid[mask_etapes_en_cours].copy()
        
        if df_pipe_en_cours.empty:
            st.warning("‚ö†Ô∏è Aucune souscription en cours dans le pipe (toutes les souscriptions sont d√©j√† √† l'√©tape Act√© ou Valid√©).")
        else:
            # Informer l'utilisateur du nombre de souscriptions en cours
            nb_total = len(df_epargne_valid)
            nb_en_cours = len(df_pipe_en_cours)
            st.info(f"‚ÑπÔ∏è {nb_en_cours} souscriptions sur {nb_total} sont en cours de traitement (hors √©tapes Act√©/Valid√©).")
            
            # Ajuster les dates pour avoir une plage compl√®te du 1er au dernier jour du mois
            df_pipe_en_cours = adjust_dates_to_month_range(df_pipe_en_cours, 'Date de souscription')
            
            # Cr√©er une agr√©gation mensuelle avec les dates de d√©but et fin
            pipe_mensuel = df_pipe_en_cours.groupby('Mois').agg(
                Montant_Total=('Montant du placement', 'sum'),
                Premier_Jour=('Premier_Jour_Mois', 'first'),
                Dernier_Jour=('Dernier_Jour_Mois', 'first'),
                Nombre_Souscriptions=('Date de souscription', 'count')
            ).reset_index()
            
            # Trier par date de d√©but
            pipe_mensuel = pipe_mensuel.sort_values('Premier_Jour')
            
            # S'assurer que les dates sont valides (pas de NaT)
            pipe_mensuel['Premier_Jour'] = pd.to_datetime(pipe_mensuel['Premier_Jour'], errors='coerce')
            pipe_mensuel['Dernier_Jour'] = pd.to_datetime(pipe_mensuel['Dernier_Jour'], errors='coerce')
            
            # Remplacer les dates NaT par les premiers et derniers jours du mois bas√©s sur la colonne 'Mois'
            for idx, row in pipe_mensuel.iterrows():
                if pd.isna(row['Premier_Jour']) or pd.isna(row['Dernier_Jour']):
                    try:
                        mois_annee = row['Mois']
                        annee, mois = mois_annee.split('-')
                        premier_jour = pd.Timestamp(year=int(annee), month=int(mois), day=1)
                        dernier_jour = pd.Timestamp(year=int(annee), month=int(mois), day=pd.Timestamp(premier_jour).days_in_month)
                        
                        if pd.isna(row['Premier_Jour']):
                            pipe_mensuel.at[idx, 'Premier_Jour'] = premier_jour
                        if pd.isna(row['Dernier_Jour']):
                            pipe_mensuel.at[idx, 'Dernier_Jour'] = dernier_jour
                    except Exception:
                        # En cas d'erreur, laisser les valeurs NaT
                        pass
            
            # Cr√©er des √©tiquettes personnalis√©es pour l'axe X avec les plages de dates
            pipe_mensuel['P√©riode'] = pipe_mensuel.apply(
                lambda row: f"{row['Mois']} ({row['Premier_Jour'].strftime('%d/%m') if pd.notna(row['Premier_Jour']) else '01/01'} - {row['Dernier_Jour'].strftime('%d/%m') if pd.notna(row['Dernier_Jour']) else '31/12'})", 
                axis=1
            )
            
            # Cr√©er un DataFrame pour l'affichage et l'export
            pipe_display_df = pd.DataFrame({
                'Mois': pipe_mensuel['Mois'],
                'P√©riode': pipe_mensuel['P√©riode'],
                'Montant Total': pipe_mensuel['Montant_Total'],
                'Nombre de Souscriptions': pipe_mensuel['Nombre_Souscriptions']
            })
            
            # Formatage pour l'affichage
            pipe_display_df['Montant Total'] = pipe_display_df['Montant Total'].apply(lambda x: f"{x:,.0f}‚Ç¨")
            
            # Afficher le tableau r√©capitulatif
            st.dataframe(pipe_display_df, use_container_width=True)
            
            # Espacement
            st.write("")
            
            # Cr√©er le graphique avec les p√©riodes compl√®tes
            fig_pipe = px.bar(
                pipe_mensuel,
                x='P√©riode',
                y='Montant_Total',
                title=f"üìä √âvolution Mensuelle du Pipe √âpargne en cours",
                text='Montant_Total',
                color_discrete_sequence=['#FFA500']  # Orange pour diff√©rencier du graphique pr√©c√©dent
            )
            fig_pipe.update_traces(texttemplate='%{text:,.0f}‚Ç¨', textposition='outside')
            
            # Ajouter une annotation pour le nombre de souscriptions
            for i, row in pipe_mensuel.iterrows():
                fig_pipe.add_annotation(
                    x=row['P√©riode'],
                    y=row['Montant_Total'],
                    text=f"{row['Nombre_Souscriptions']} souscr.",
                    showarrow=False,
                    yshift=-30,
                    font=dict(size=10)
                )
            
            st.plotly_chart(fig_pipe, use_container_width=True)
            
            # Espacement entre les sections
            st.markdown("---")
            st.write("")
            
            # Analyse par √©tape pour le pipe en cours
            if '√âtape' in df_pipe_en_cours.columns:
                st.subheader("üìä R√©partition du Pipe par √âtape")
                
                # Agr√©gation par √©tape
                repartition_etape = df_pipe_en_cours.groupby('√âtape').agg(
                    Montant_Total=('Montant du placement', 'sum'),
                    Nombre_Souscriptions=('Date de souscription', 'count')
                ).reset_index()
                
                # Trier par montant total d√©croissant
                repartition_etape = repartition_etape.sort_values('Montant_Total', ascending=False)
                
                # Formatage pour l'affichage
                repartition_etape['Montant Total'] = repartition_etape['Montant_Total'].apply(lambda x: f"{x:,.0f}‚Ç¨")
                
                # Renommer les colonnes pour l'affichage
                repartition_etape_display = pd.DataFrame({
                    '√âtape': repartition_etape['√âtape'],
                    'Montant Total': repartition_etape['Montant Total'],
                    'Nombre de Souscriptions': repartition_etape['Nombre_Souscriptions']
                })
                
                # Afficher le tableau r√©capitulatif
                st.dataframe(repartition_etape_display, use_container_width=True)
                
                # Espacement
                st.write("")
                
                # Cr√©er un graphique en camembert pour la r√©partition par √©tape
                fig_etape = px.pie(
                    repartition_etape,
                    values='Montant_Total',
                    names='√âtape',
                    title="R√©partition du Pipe √âpargne par √âtape",
                    hole=0.4,
                    height=500
                )
                st.plotly_chart(fig_etape, use_container_width=True)
                
                # Export des donn√©es du pipe
                st.subheader("üì§ Export des Donn√©es du Pipe")
                
                # Pr√©parer les donn√©es pour l'export
                export_data = df_pipe_en_cours.copy()
                
                # Cr√©er le bouton de t√©l√©chargement
                create_download_button(export_data, "pipe_epargne", "pipe_epargne_export")
    else:
        st.warning("‚ö†Ô∏è La colonne '√âtape' n'a pas √©t√© trouv√©e dans les donn√©es. Impossible d'analyser le pipe en cours.")
    
    # Section Pipe de Collecte par Mois et par Conseiller
    st.subheader("üìä Pipe de Collecte par Mois et par Conseiller")
    
    if not df_original.empty:
        # Utiliser les m√™mes colonnes que dans l'analyse principale
        montant_col = None
        for col in df_original.columns:
            if col.lower() in ['montant', 'amount', 'valeur', 'value', 'prix', 'price']:
                montant_col = col
                break
        
        date_col = None
        for col in df_original.columns:
            if col.lower() in ['date', 'date de souscription', 'date_souscription', 'created_at', 'timestamp']:
                date_col = col
                break
        
        # Extraire le conseiller
        df_pipe_conseiller = df_original.copy()
        df_pipe_conseiller = extract_conseiller(df_pipe_conseiller)
        conseiller_col_name = 'Conseiller'
        
        # Identifier la colonne de statut ou d'√©tape
        statut_col = None
        for col in df_pipe_conseiller.columns:
            if col.lower() in ['statut', 'status', '√©tat', 'etat', 'state']:
                statut_col = col
                break
        
        etape_col = None
        for col in df_pipe_conseiller.columns:
            if col.lower() in ['√©tape', 'etape', 'step', 'phase', 'stage']:
                etape_col = col
                break
        
        # Utiliser la colonne √©tape si disponible, sinon utiliser la colonne statut
        filtre_col = etape_col if etape_col else statut_col
        
        if filtre_col and montant_col and date_col:
            # Convertir les colonnes n√©cessaires
            df_pipe_conseiller[date_col] = safe_to_datetime(df_pipe_conseiller[date_col])
            df_pipe_conseiller[montant_col] = safe_to_numeric(df_pipe_conseiller[montant_col])
            
            # Cr√©er la colonne Mois
            df_pipe_conseiller['Mois'] = df_pipe_conseiller[date_col].dt.to_period('M').astype(str)
            
            # Filtrer pour n'inclure que les souscriptions en cours (pipe)
            # Exclure les √©tapes/statuts finalis√©s (act√©, valid√©, cl√¥tur√©) et les statuts annul√©s
            statuts_finalises = ['act√©', 'valid√©', 'clotur√©', 'cl√¥tur√©', 'acte', 'valide', 'cloture']
            
            # Identifier les statuts annul√©s
            statuts_annules = [s.lower() for s in df_pipe_conseiller[filtre_col].unique() if 'annul' in str(s).lower()]
            
            # Combiner les statuts √† exclure
            statuts_a_exclure = [s.lower() for s in statuts_finalises] + statuts_annules
            
            # Filtrer le dataframe pour exclure les statuts finalis√©s et annul√©s
            df_pipe = df_pipe_conseiller[~df_pipe_conseiller[filtre_col].str.lower().isin(statuts_a_exclure)].copy()
            
            if not df_pipe.empty:
                # Cr√©er des options de p√©riode pour l'analyse
                col1, col2 = st.columns(2)
                
                with col1:
                    # S√©lection de la p√©riode d'analyse
                    periode_options = ['Mois', 'Semaine', 'Trimestre']
                    periode_selectionnee = st.selectbox("P√©riode d'analyse", periode_options, key="pipe_periode_analyse_conseiller")
                
                with col2:
                    # S√©lection du conseiller pour le filtrage
                    if conseiller_col_name in df_pipe.columns:
                        conseillers = ['Tous'] + sorted([str(x) for x in df_pipe[conseiller_col_name].unique().tolist() if str(x) != 'nan'])
                        conseiller_filtre = st.selectbox("Filtrer par conseiller", conseillers, key="pipe_conseiller_analyse_conseiller")
                    else:
                        conseiller_filtre = 'Tous'
                
                # Filtrer par conseiller si n√©cessaire
                if conseiller_filtre != 'Tous' and conseiller_col_name in df_pipe.columns:
                    df_pipe = df_pipe[df_pipe[conseiller_col_name] == conseiller_filtre]
                
                # D√©terminer la colonne de p√©riode √† utiliser
                if periode_selectionnee == 'Semaine':
                    df_pipe['Semaine'] = df_pipe[date_col].dt.strftime('%Y-%U')
                    colonne_periode = 'Semaine'
                elif periode_selectionnee == 'Trimestre':
                    df_pipe['Trimestre'] = df_pipe[date_col].dt.to_period('Q').astype(str)
                    colonne_periode = 'Trimestre'
                else:
                    colonne_periode = 'Mois'
                
                # V√©rifier que la colonne de p√©riode existe
                if colonne_periode in df_pipe.columns:
                    # Agr√©ger les donn√©es par p√©riode et par conseiller
                    if conseiller_col_name in df_pipe.columns:
                        # Grouper par p√©riode et conseiller
                        pipe_periode_conseiller = df_pipe.groupby([colonne_periode, conseiller_col_name]).agg(
                            Montant_Total=(montant_col, 'sum'),
                            Nombre=(montant_col, 'count')
                        ).reset_index()
                        
                        # Trier par p√©riode
                        pipe_periode_conseiller = pipe_periode_conseiller.sort_values(colonne_periode)
                        
                        # Cr√©er le graphique
                        fig_pipe_periode = px.bar(
                            pipe_periode_conseiller,
                            x=colonne_periode,
                            y='Montant_Total',
                            color=conseiller_col_name,
                            title=f"üí∞ Pipe de Collecte par {periode_selectionnee} et par Conseiller",
                            text='Montant_Total',
                            barmode='group',
                            labels={
                                colonne_periode: periode_selectionnee,
                                'Montant_Total': 'Montant Total (‚Ç¨)',
                                conseiller_col_name: 'Conseiller'
                            }
                        )
                        
                        # Mise en forme du graphique
                        fig_pipe_periode.update_traces(texttemplate='%{text:,.0f}‚Ç¨', textposition='outside')
                        fig_pipe_periode.update_layout(xaxis_tickangle=-45)
                        
                        # Afficher le graphique
                        st.plotly_chart(fig_pipe_periode, use_container_width=True)
                        
                        # Tableau r√©capitulatif du pipe par conseiller
                        st.write("### D√©tails du Pipe par Conseiller")
                        
                        # Agr√©ger par conseiller pour le tableau r√©capitulatif
                        pipe_conseiller = df_pipe.groupby(conseiller_col_name).agg(
                            Montant_Total=(montant_col, 'sum'),
                            Nombre_Souscriptions=(montant_col, 'count'),
                            Montant_Moyen=(montant_col, 'mean')
                        ).reset_index().sort_values('Montant_Total', ascending=False)
                        
                        # Formater pour l'affichage
                        pipe_conseiller_display = pipe_conseiller.copy()
                        pipe_conseiller_display['Montant_Total'] = pipe_conseiller_display['Montant_Total'].apply(lambda x: f"{x:,.0f}‚Ç¨")
                        pipe_conseiller_display['Montant_Moyen'] = pipe_conseiller_display['Montant_Moyen'].apply(lambda x: f"{x:,.0f}‚Ç¨")
                        
                        # Renommer les colonnes
                        pipe_conseiller_display = pipe_conseiller_display.rename(columns={
                            conseiller_col_name: 'Conseiller',
                            'Montant_Total': 'Montant Total',
                            'Nombre_Souscriptions': 'Nombre de Souscriptions',
                            'Montant_Moyen': 'Montant Moyen'
                        })
                        
                        st.dataframe(pipe_conseiller_display, use_container_width=True)
                        
                        # Analyse par √©tape/statut
                        if filtre_col:
                            st.write(f"### R√©partition du Pipe par {filtre_col}")
                            
                            # Agr√©ger par √©tape/statut
                            pipe_etape = df_pipe.groupby(filtre_col).agg(
                                Montant_Total=(montant_col, 'sum'),
                                Nombre=(montant_col, 'count')
                            ).reset_index().sort_values('Montant_Total', ascending=False)
                            
                            # Cr√©er le graphique
                            fig_pipe_etape = px.pie(
                                pipe_etape,
                                values='Montant_Total',
                                names=filtre_col,
                                title=f"R√©partition du Pipe par {filtre_col}",
                                hole=0.4
                            )
                            
                            # Mise en forme du graphique
                            fig_pipe_etape.update_traces(textinfo='percent+label')
                            
                            # Afficher le graphique
                            st.plotly_chart(fig_pipe_etape, use_container_width=True)
                            
                            # Tableau r√©capitulatif par √©tape/statut
                            pipe_etape_display = pipe_etape.copy()
                            pipe_etape_display['Montant_Total'] = pipe_etape_display['Montant_Total'].apply(lambda x: f"{x:,.0f}‚Ç¨")
                            pipe_etape_display = pipe_etape_display.rename(columns={
                                filtre_col: filtre_col,
                                'Montant_Total': 'Montant Total',
                                'Nombre': 'Nombre de Souscriptions'
                            })
                            
                            st.dataframe(pipe_etape_display, use_container_width=True)
                    else:
                        st.warning("‚ö†Ô∏è Colonne conseiller non d√©tect√©e pour l'analyse du pipe.")
                else:
                    st.warning(f"‚ö†Ô∏è Colonne {colonne_periode} non disponible pour l'analyse du pipe.")
            else:
                st.info("‚ÑπÔ∏è Aucune souscription en cours (pipe) trouv√©e.")
        else:
            st.warning("‚ö†Ô∏è Colonnes n√©cessaires manquantes pour l'analyse du pipe par conseiller.")
    else:
        st.warning("‚ö†Ô∏è Aucune donn√©e disponible pour l'analyse du pipe par conseiller.")


if __name__ == "__main__":
    st.set_page_config(page_title="Analyse Souscriptions √âpargne", page_icon="üë≥", layout="wide")
    st.title("üí≥ Analyse des Souscriptions √âpargne")
    
    uploaded_file = st.file_uploader("üìÅ Charger un fichier de souscriptions √©pargne", type=["xlsx", "csv"])
    
    if uploaded_file is not None:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        analyser_souscriptions_epargne(df)
