# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - test
  - security
  - build
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  TARGET_BRANCH: "Rahamane"

cache:
  paths:
    - .cache/pip/

# Desactiver fetch_from_s3
fetch_from_s3:
  stage: test
  image: public.ecr.aws/aws-cli/aws-cli:latest
  rules:
    - when: never   # désactive totalement le job
  script:
    - echo "disabled"

# Tests de base
test:
  stage: test
  image: python:3.11
  rules:
    - if: '$CI_COMMIT_BRANCH == $TARGET_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest
  script:
    - echo "Tests de syntaxe..."
    - python -m py_compile app.py
    - python -c "import analyses; import utils; print('Imports réussis')" || true
    - echo "Tests unitaires..."
    - mkdir -p tests/ || true
    - python -m pytest tests/ -v --junit-xml=test-results.xml || echo "<testsuites><testsuite name='no-tests' tests='0'/></testsuites>" > test-results.xml
  artifacts:
    reports:
      junit: test-results.xml
    expire_in: 1 week

# Scan de sécurité (optionnel)
security_scan:
  stage: security
  image: python:3.9
  rules:
    - if: '$CI_COMMIT_BRANCH == $TARGET_BRANCH'
  before_script:
    - pip install --upgrade pip
    - pip install safety bandit
    - pip install -r requirements.txt
  script:
    - echo "Scan de sécurité des dépendances..."
    - safety check -r requirements.txt || echo "Vulnérabilités détectées (non bloquant)"
    - echo "Analyse statique du code..."
    - bandit -r . -x ./tests,./venv -f json -o bandit-report.json -ll || echo "Problèmes de sécurité détectés (non bloquant)"
  artifacts:
    reports:
      sast: bandit-report.json
    expire_in: 1 week
  allow_failure: true

# Construction Docker
build_docker:
  stage: build
  image: docker:20.10.16
  services: 
    - docker:20.10.16-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_BUILDKIT: 1
  rules:
    - if: '$CI_COMMIT_BRANCH == $TARGET_BRANCH'
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker pull "$CI_REGISTRY_IMAGE:latest" || true
  script:
    - echo "Build image..."
    - docker build --cache-from "$CI_REGISTRY_IMAGE:latest" --build-arg BUILDKIT_INLINE_CACHE=1 -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE:latest"

# Déploiement Docker avec mot de passe
deploy_docker:
  stage: deploy
  image: ubuntu:22.04
  rules:
    - if: '$CI_COMMIT_BRANCH == $TARGET_BRANCH'
      when: manual
  before_script:
    - apt-get update -qq && apt-get install -y -qq curl sshpass
  script:
    - echo "Déploiement via Docker avec mot de passe..."
    - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY"
    - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $CI_REGISTRY_IMAGE:latest"
    - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop dashboard-app || true"
    - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker rm dashboard-app || true"
    - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d --name dashboard-app -p 8501:8501 --restart unless-stopped -e DB_HOST=$DB_HOST -e DB_USER=$DB_USER -e DB_PASSWORD=$DB_PASSWORD -e DB_NAME=$DB_NAME -v /app/data:/app/data --memory=1g --cpus=1 $CI_REGISTRY_IMAGE:latest"
    - echo "Attente du démarrage de l'application..."
    - sleep 15
    - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker logs dashboard-app --tail 10"
    - echo "Déploiement terminé"
  environment:
    name: production
    url: http://$SERVER_IP:8501

# Rollback avec mot de passe
rollback:
  stage: deploy
  image: ubuntu:22.04
  rules:
    - if: '$CI_COMMIT_BRANCH == $TARGET_BRANCH'
      when: manual
  before_script:
    - apt-get update -qq && apt-get install -y -qq sshpass
  script:
    - echo "Rollback vers la version précédente..."
    - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop dashboard-app || true"
    - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker rm dashboard-app || true"
    - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d --name dashboard-app -p 8501:8501 --restart unless-stopped $CI_REGISTRY_IMAGE:$CI_COMMIT_BEFORE_SHA"
    - echo "Rollback effectué"